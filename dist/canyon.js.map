{"version":3,"file":"canyon.js","mappings":";;;;;;;;;AAAA;AACA,sCAAsC;AACtC;AACA;AACA;AACA,mCAAmC;;AAEnC;AACA;AACA,oBAAoB,kCAAkC;AACtD,qBAAqB,kCAAkC;AACvD,oBAAoB,kCAAkC;AACtD,qBAAqB,kCAAkC;AACvD,sBAAsB,wBAAwB;AAC9C,KAAK;;AAEL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB,2BAA2B;;AAE3B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB;AACtB;;AAEA,8CAA8C;;AAE9C;AACA,qCAAqC;;AAErC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uCAAuC;AACnE,6BAA6B,wCAAwC;AACrE,4BAA4B,uCAAuC;AACnE,6BAA6B,wCAAwC;AACrE,4BAA4B;AAC5B,aAAa;AACb;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;;;;;;;;;;;;;;AC7JD;AACA;AACA,iCAAiC;AACiC;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA,cAAc,YAAY;AAC1B,kBAAkB,wBAAwB;AAC1C,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,8EAAgB;AAC5C;AACA;AACA;AACA,CAAC;;;;;;;;;;;AC1HD;AACA,oCAAoC;;AAEpC;AACA,IAAI,gFAAgF;AACpF,IAAI,gFAAgF;AACpF,IAAI,gFAAgF;AACpF,IAAI,gFAAgF;AACpF,IAAI,gFAAgF;AACpF,IAAI,iFAAiF;AACrF,IAAI,gFAAgF;AACpF;;AAEA;;AAEA;AACA;AACA,mBAAmB,iBAAiB;AACpC,mBAAmB,cAAc;AACjC,mBAAmB,cAAc;AACjC,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,IAAI;;AAEf;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,2BAA2B;AAC3B;AACA;AACA,OAAO;AACP,KAAK;AACL,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA,WAAW,IAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA,MAAM,SAAS;AACf;AACA,iDAAiD;AACjD;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA,oDAAoD,qDAAqD;;AAEzG;AACA,GAAG;;AAEH;AACA;;AAEA,oDAAoD,iBAAiB;;AAErE;AACA,GAAG;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACrIA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAY,EAAE,GAAG,EAAE,GAAG,EAAE;;AAExB;;AAEA;AACA;AACA;;AAEA;AACA,yCAAyC,OAAO;;AAEhD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mBAAmB,OAAO;;AAE1B;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,yCAAyC,OAAO;;AAEhD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,mBAAmB,OAAO;;AAE1B;AACA;AACA;AACA;;AAEA,8CAA8C,QAAQ;;AAEtD;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAIE;;;;;;;;;;;;;;;;;;;;;AChHF;AACA,4CAA4C;;;AAG5C;AACA;AACA,2BAA2B;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA,YAAY;AACZ;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,CAAC;;;AAGD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;;AAEuH;;;;;;;;;;;AC/GvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACnCA;AACA,4CAA4C;AAC5C;;AAEmC;AACmF;;AAEtH,yBAAyB;AACzB,yCAAyC;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,kBAAkB;AAC3C,8BAA8B,kBAAkB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA,qCAAqC,6DAA6D;;AAElG;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,8CAA8C;AAC9C;AACA,iBAAiB,GAAG,gBAAgB;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,oBAAoB,6DAAa;AACjC;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,sEAAsB;AACtC,aAAa;AACb;AACA,qDAAqD;AACrD;AACA;AACA,oBAAoB,6DAAa;AACjC;AACA,kBAAkB;AAClB;AACA;AACA,aAAa;;AAEb,gBAAgB,yDAAS;AACzB,kDAAkD;AAClD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD,0CAA0C,iDAAiD;AAC3F;;AAEA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE;AACtE;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,iDAAiD,4EAA4E;AAC7H;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,sCAAsC,yCAAyC;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;;AAEA;AACA;AACA,gBAAgB,yDAAS;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET,uDAAuD,8BAA8B;AACrF;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wBAAwB,SAAS;AACjE;AACA;AACA;AACA;AACA,cAAc;AACd,8DAA8D;AAC9D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,yBAAyB,SAAS;AAClE;AACA;AACA;AACA;AACA,cAAc;AACd,+DAA+D;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,+DAA+D,6CAA6C;AAC5G,+DAA+D,iBAAiB;AAChF;AACA;AACA;AACA,SAAS;;;AAGT;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,sCAAsC,+CAA+C;AACrF;AACA,SAAS;;AAET;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,qEAAqB;;AAEjC;AACA;AACA,oDAAoD,0BAA0B;AAC9E;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,oDAAoD;AACpD;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,oDAAoD;AACpD,cAAc;AACd;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,kBAAkB;AAClB;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qCAAqC,6DAAa;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,gCAAgC,6DAAa;AAC7C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,4BAA4B,6DAAa;AACzC,0BAA0B;AAC1B;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA,kBAAkB,6DAAa;AAC/B;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA,gBAAgB,yDAAS;AACzB;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,6CAA6C,4EAA4E;AACzH;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,KAAK;;AAEL;AACA,0CAA0C,iCAAiC;AAC3E;AACA,CAAC;;;;;;;UCnmBD;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;ACNA;AACA,4CAA4C;;AAE5C,WAAW,uBAAuB;AACV;AACC;AACQ;AACC;AAClC;;;AAGA,0BAA0B;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6BAA6B,oEAAoE;AACjG;AACA;AACA;AACA,SAAS;;AAET,8CAA8C;;AAE9C;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","sources":["webpack://elfland-glider/./assets/land-shader.js","webpack://elfland-glider/./canyon/canyon-terrain.js","webpack://elfland-glider/./canyon/dark-elf.js","webpack://elfland-glider/./src/BufferGeometryUtilsRump.js","webpack://elfland-glider/./src/elfland-utils.js","webpack://elfland-glider/./src/shim/requestIdleCallback.js","webpack://elfland-glider/./src/state.js","webpack://elfland-glider/webpack/bootstrap","webpack://elfland-glider/webpack/runtime/compat get default export","webpack://elfland-glider/webpack/runtime/define property getters","webpack://elfland-glider/webpack/runtime/hasOwnProperty shorthand","webpack://elfland-glider/webpack/runtime/make namespace object","webpack://elfland-glider/./canyon/canyon.js"],"sourcesContent":["// land-shader.js - vaguely natural-looking material for A-Frame\n// Copyright Â© 2018,2023 Doug Reeder; Licensed under the GNU GPL-3.0\n//\n// The produced texture is a mix of the specified colors (default gray brown and dirt brown).\n// Faces will be 44% brighter in direct sun and 44% darker when facing away from the sun.\n// Example: material=\"shader:land; color1Yin:#63574d\"\n\nAFRAME.registerShader('land', {\n    schema: {\n        color1Yin: {type: 'color', default: '#63574d'},   // gray brown\n        color1Yang: {type: 'color', default: '#553c29'},   // dirt brown\n        color2Yin: {type: 'color', default: '#655b43'},   // gray sand\n        color2Yang: {type: 'color', default: '#60502f'},   // sand\n        sunPosition: {type: 'vec3', default: {x:-1.0, y:1.0, z:-1.0}}\n    },\n\n    vertexShader: `\nuniform vec3 sunNormal;\n\nvarying vec3 pos;\nvarying float sunFactor;\n\nvoid main() {\n  pos = position;\n    \n  sunFactor = 0.6875 + 0.75 * max(dot(normal, sunNormal), 0.0);\n   \n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}`,\n\n    fragmentShader: `\nuniform vec3 color1Yin;\nuniform vec3 color1Yang;\nuniform vec3 color2Yin;\nuniform vec3 color2Yang;\n\nvarying vec3 pos;\nvarying float sunFactor;\n\n//\tSimplex 3D Noise\n//\tby Ian McEwan, Ashima Arts\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise(vec3 v){\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C \n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 ); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\nvoid main() {\n    float strata = smoothstep(-255.0, -253.0, pos.y) - smoothstep(-205.0, -203.0, pos.y) + smoothstep(-103.0, -100.5, pos.y);\n    vec3 colorYin  = mix(color1Yin,  color2Yin,  strata);\n    vec3 colorYang = mix(color1Yang, color2Yang, strata);\n\n    vec3 inherent = mix(\n        colorYin,\n        colorYang,\n        0.5 * (1.0 + snoise(pos*0.5) + 0.75*snoise(pos))\n    );\n    gl_FragColor = vec4(inherent * sunFactor, 1.0);\n}\n`,\n\n    /**\n     * `init` used to initialize material. Called once.\n     */\n    init: function (data) {\n        let sunPos = new THREE.Vector3(data.sunPosition.x, data.sunPosition.y, data.sunPosition.z);\n        this.material = new THREE.ShaderMaterial({\n            uniforms: {\n                color1Yin: {value: new THREE.Color(data.color1Yin)},\n                color1Yang: {value: new THREE.Color(data.color1Yang)},\n                color2Yin: {value: new THREE.Color(data.color2Yin)},\n                color2Yang: {value: new THREE.Color(data.color2Yang)},\n                sunNormal: {value: sunPos.normalize()}\n            },\n            vertexShader: this.vertexShader,\n            fragmentShader: this.fragmentShader\n        });\n    },\n    /**\n     * `update` used to update the material. Called on initialization and when data updates.\n     */\n    update: function (data) {\n        this.material.uniforms.color1Yin.value.set(data.color1Yin);\n        this.material.uniforms.color1Yang.value.set(data.color1Yang);\n        this.material.uniforms.color2Yin.value.set(data.color2Yin);\n        this.material.uniforms.color2Yang.value.set(data.color2Yang);\n        let sunPos = new THREE.Vector3(data.sunPosition.x, data.sunPosition.y, data.sunPosition.z);\n        this.material.uniforms.sunNormal.value = sunPos.normalize();\n        // this.material.uniforms.sunNormal.value.set(sunPos.normalize());\n    },\n});\n","// canyon-terrain.js - the landscape geometry for a canyon\n// Data and code are in one file to avoid asynchronous loading.\n// Copyright Â© 2023 Doug Reeder; Licensed under the GNU GPL-3.0\nimport { toCreasedNormals } from '../src/BufferGeometryUtilsRump';\n\nconst X_POINTS = 41;\nconst Z_POINTS = 67;\nconst terrainHeights = `\n0 0 0  0  0  0  0  0  0  0   0  0  0  0  0  0  0  0  0  0   0  0  0  0  0  0  0  0  0  0   0 0 0 0 0 0 0 0 0 0  0\n0 0 0  0  0  0  0  0  0  0   0 -1 -2 -2 -1  5 10 15 20 22  25 27 29 23 20 17 15  5  0  0   0 0 0 0 0 0 0 0 0 0  0\n0 0 0  0  0  0  0 -1 -2 -3  -3 -2 10 15 25 30 35 37 41 42  45 47 50 54 59 55 54 49 42  5   0 0 0 0 0 0 0 0 0 0  0\n0 0 0  0 -1 -2 -3 -4 -4 -3   5 20 25 31 41 45 49 54 56 58  60 63 65 70 72 78 80 70 45 15   1 0 0 0 0 0 0 0 0 0  0\n0 0 0 -1 -2 -3 -4 -5 -4 10  20 25 30 35 43 49 52 60 65 70  72 75 80 88 95 99 99 90 75 35  10 0 0 0 0 0 0 0 0 0  0\n\n0 -1 -2 -3 -4 -5 -6 -5 10 20  25 30 38 40 47 55 61 65 70 75  80 85 90 95 99 99 99 99 85 70  30  1  0  0  0  0 0 0 0 0  0\n0 -2 -3 -5 -5 -6 -6  5 20 25  30 35 40 46 50 51 59 62 65 70  75 80 85 90 95 99 99 99 94 81  79 68 59  1  0  0 0 0 0 0  0\n0 -2 -4 -6 -6 -7 15 20 25 30  35 40 41 45 47 45 40 30 35 45  50 60 65 75 80 85 90 95 90 87  82 70 69 45  1  0 0 0 0 0  0\n0 -2 -4 -5 -6 -7 20 31 42 47  49 46 47 46 40 35 30 15 10 10   5 10 20 45 65 65 70 75 86 84  80 78 71 55 66  5 0 0 0 0  0\n0 -1 -3 -4 -5 -6 22 39 41 50  52 50 48 41 35 20 10  1  0  0   0  0  0  5 15 40 50 70 82 83  84 75 77 72 63 59 1 0 0 0  0\n\n\n0 -1 -2 -3  -4 -5 15 48 55 60  56 53 47 40 35  1 0 0 0 0  0 0  0  0  0  5 67 72 79 81  80 79 78 76 73 65 62  5  0  0  0\n0 -1 -2 -3  -4  5 45 55 60 65  60 55 50 45 15  0 0 0 0 0  0 0  0  0  5 65 71 75 78 79  78 77 74 72 70 64 58 45  0  0  0\n0 -1 -2 -3   5 25 55 60 65 70  65 60 55 50  5  0 0 0 0 0  0 0  0  5 55 63 68 72 71 68  65 68 73 70 65 60 55 50  5  0  0\n0 -1 -2  5  50 55 60 65 70 75  70 65 60 55 50  5 0 0 0 0  0 0  5 45 60 62 65 60 55 50  20 50 55 57 55 54 55 52 48  0  0\n0 -1  5 50  55 65 65 70 75 75  75 69 65 60 55 50 5 0 0 0  0 0 35 50 54 60 55 50 45  0   0  5 44 49 52 55 54 52 48  1  0\n\n0  5 50 60 65 70 75 75 75 75  75 71 65 60 55 50 45  5  0  0  0 0 40 49 55 50 45 40  5  0   0  0  5 52 54 56 57 56 54 51  0\n0  5 65 70 75 75 75 75 75 75  75 75 70 65 60 55 50 45  5  0  0 0 47 50 49 40 35  5  0  0   0  0  0 55 57 59 60 59 57 54  0\n0  5 65 70 75 75 75 75 75 75  75 75 75 70 65 60 55 50 45  0  0 0  0 47 46 40  5  0  0  0   0  0  5 60 64 65 64 60 59 55  0\n0 55 60 65 70 75 75 75 75 75  75 75 75 75 70 65 60 55 48  5  0 0  0  0  0  0  0  0  0  0   5 70 69 69 70 67 64 63 60  1  0\n0 50 55 63 75 77 75 75 75 75  75 75 75 75 72 68 63 58 51 45  5 0  0  0  0  0  0  5 10 70  74 73 72 71 71 70 67 64 60  0  0\n\n\n0 40 50 71 79 77 75 72 70 65  70 75 75 74 70 65 60 53 46 40  47 55 60 65 70 75 75 75 75 75  75 75 74 73 72 72 69 64 57 0  0\n0 45 55 65 78 79 77 70 65 65  65 70 72 68 63 58 55 47 42 46  59 63 68 72 77 80 80 79 79 79  78 78 77 76 75 72 67 59 51 0  0\n0 40 60 69 81 82 78 70 65 60  60 60 60 58 55 53 47 43 50 60  68 70 76 79 84 85 85 83 83 83  84 83 82 79 76 70 62 52  1 0  0\n0 35 50 70 84 85 84 75 65 60  55 53 50 49 48 45 42 47 55 68  74 77 83 85 90 90 90 87 87 86  87 84 83 78 72 65 54 41  0 0  0\n0  0 40 74 85 86 87 78 75 68  49  1  1  1 30 39 47 55 60 65  80 84 90 90 95 95 95 91 91 89  88 85 79 73 66 57 44 30  0 0  0\n\n0 0 40 80 90 92 90 85 80 70   1  0  0  0  1 45 55 60 70 75  85 90 95 95 99 99 99 95 95 92  89 86 73 67 58 47 33 17 0 0  0\n0 0 35 80 91 93 94 90 80 70   1  0  0  0  0  1 55 65 75 80  90 95 99 99 99 99 99 99 96 93  90 87 65 58 48 35 18  1 0 0  0\n0 0 30 75 85 95 95 95 85 75   1  0  0  0  0  1 50 75 90 94  96 97 95 95 95 99 95 90 82 80  75 70 63 46 34 18  1  0 0 0  0\n0 0  5 45 80 92 96 96 96 90  85  1  1  1  1 55 75 95 95 96  95 90 90 90 90 90 85 80 70 71  63 54 45 34  1  0  0  0 0 0  0\n0 0  0 35 70 85 95 96 96 95  95 90 85 80 70 75 95 95 96 95  90 87 86 84 83 80 75 70 57 59  55 46  1  0  0  0  0  0 0 0  0\n\n\n0 0 0 15 50 80 85 90 95 95  95 95 95 95 95 95 95 95 95 90  85 81 79 74 62 56 49 44 40 38  12 0 0 0 0 0 0 0 0 0  0\n0 0 0  0  5 61 79 85 90 95  99 99 99 99 99 99 99 90 85 80  75 62 50 39 29 26 23 20 36 35  10 0 0 0 0 0 0 0 0 0  0\n0 0 0  0  0  1 85 89 92 95  98 99 99 98 98 97 96 93 88 84   1  1  1  1  0  0  0  0 33 32   0 0 0 0 0 0 0 0 0 0  0\n0 0 0  0  0  0  1 90 93 94  97 98 97 96 97 96 95 94  1  1   0  0  0  0  0  0  0  0 31 30   0 0 0 0 0 0 0 0 0 0  0\n0 0 0  0  0  0  1 92 94 96  97 96 96 95 94  1  1  1  0  0   0  0  0  0  0  0  0  0 29 29   0 0 0 0 0 0 0 0 0 0  0\n\n0 0  0  0  0  0  1 92 94 95  96 95 94 94  1  0  0  0  0  0   0  0  1  1  1  1  1  1 26 27  23  3  2  1  1  1  0  0  0 0  0\n0 0  0  0  0  0  1 92 93 94  95 94 93  1  0  0  0  0  0  1   1  1  1  2  2  2  2  2 24 25  23 18  3  2  2  1  1  0  0 0  0\n0 0  0  0  0  0  1 92 93 94  94 93 92  1  0  0  0  1  1  1   2  2  2  2 14 14 17 20 22 23  24 22 20 19  3  2  1  0  0 0  0\n0 0  0  0  0  0  1 92 92 93  92 92 91  1  0  0  1  1  2  2   2 11 12 13 15 16 17 18 20 22  23 23 22 19 13  2  1  1  0 0  0\n0 0  0  0  0  1 90 91 92 91  91 90  1  0  0  0  1  2  2  9  11 12 13 14 15 15 16 17 18 19  21 22 23 21 17  3  2  1  0 0  0\n0 0  0  0  0  1 89 90 91 90  89  1  1  0  0  1  2  6  7  9  11 12 13 14 14 14  2  1  1  0   0 18 22 24 22 18  2  1  1 0  0\n0 0  0  0  1  1 88 89 90 89  88  1  0  0  1  1  2  7  8 10  11 12 13 13 14 14  2  1  0  0   0 19 23 25 23 19  3  2  1 0  0\n0 0  0  1  1 87 88 89 88 88  87  1  0  0  1  2  2  8  9 10  11 12 13 14 15 15  2  1  0  0   1 16 22 25 26 24 20  2  1 1  0\n0 0  1  1 86 87 88 88 87 84   1  1  0  0  1  2  8  9 10 10  11 12 13 14 15 16 17 18 19 21  22 23 24 26 27 25 21  3  2 1  0\n0 0  1 84 86 87 87 86 84 80   1  0  0  0  1  2  9 10 10 10  10 12 13 15 16 16 17 19 21 23  24 26 27 28 28 26 22 14  2 1  0\n0 1  1 84 86 86 85 83 79 75   1  0  0  0  1  2  8 10 10 10  10 12 13  4  6 15 16 18 20 21  23 24 26 27 29 27 23 15  2 1  0\n0 1 81 82 84 85 84 82 78 66   1  0  0  0  1  2  2  9 10 10  10 11  2  2  1  1  1  1  1  1   1 21 25 28 30 28 24 16  2 1  0\n0 1 81 82 84 84 82 81 77  1   0  0  0  0  1  1  2  9 11 11   4  2  2  1  1  0  0  0  0  0   0  1 25 29 31 29 25  2  1 1  0\n0 1 81 82 83 83 81 76  1  0   0  0  0  0  0  1  2 10 12 13   2  1  1  1  0  0  0  0  0  0   0  0 26 30 32 30 26  1  1 0  0\n0 1 80 81 82 81 80  1  0  0   0  0  0  0  0  1  2  2 14 15   6  1  0  0  0  0  1  1  1  0   0  0 27 31 33 31 27  1  0 0  0\n0 1 79 80 81 80 79  1  0  0   0  0  0  0  0  1  1  2 15 16  18 06  1  0  0  1 28 28 28  1   0  0 28 32 34 32 28  1  0 0  0\n0 0  1 79 80 79 77  1  0  0   0  0  0  0  0  0  1  2 17 18  20 22 24 26 28 29 30 30 30 28   0  0  1 29 33 35 33 29  1 0  0\n0 0  1 77 78 79 77  1  0  0   0  0  0  0  0  0  1  2 19 20  21 23 23 27 29 30 30 30 30 28   0  0  0 30 34 36 35 33  1 0  0\n0 0  1 76 77 78 76  1  0  0   0  0  0  0  0  0  0  0  0  0   0  0  0  1 29 30 31 30 30 29   1  0  0 31 35 37 36 33  1 1  0\n0 0  1 75 76 77 75  1  0  0   0  0  0  0  0  0  0  0  0  0   0  0  0  0  1 30 32 34 33 33  31  0  0 31 35 37 38 36 32 1  0\n0 0  1 74 75 76 75 74  1  1   1  1  1  1  1  1  0  0 48 47  47  0  0  0  0  0  1 36 35 35  33  0  0  1 33 37 39 37 33 1  0\n0 1 73 74 75 74 73 72 69 66  65 63 63 62 62 59 55 54 53 52  52 51  0  0  0  0  0  1 38 39   1  0  0  0 34 38 40 38 34 1  0\n0 1 72 73 74 73 72 70 68 67  66 64 64 64 62 60 58 57 56 55  55 54 50 48  1  0  0  0 40 39   0  0  0  1 39 40 41 39 35 1  0\n0 1 72 72 73 73 72 70 68 68  68 66 65 65 62 61 60 59 58 57  57 56 54 52 48  0  0  1 44 43   1  0  1 37 41 42 40 36  1 0  0\n0 1 70 71 71 72 71 70 69 68  68 67 66 65 63 62 61 57 56 56  58 57 56 54 52 47 46 45 45 44  45 41 37 41 42 43 41 37  1 0  0\n\n\n0 1 70 69 70 71 71 71 70 69  68 66 65 64 61 60 58 53 52 53  56 55 54 55 54 51 50 48 46 45  43 44 40 43 44 43 40 32 1 0  0\n0 1 69 68 69 69 70 69 69 68  67 65 63 61 57 56 54  1  1  1  52 51 50 52 52 53 52 51 48 47  46 46 44 45 44 42 39  1 0 0  0\n0 0  1 67 67 68 68 67 67 66  65 63 59 57  1  1  1  0  0  0   1  1 46 45 48 51 50 50 49 48  48 47 46 44 43 41 35  1 0 0  0\n0 0  0  1 66 65 65 64 64 63  62 60  1  1  0  0  0  0  0  0   0  0  0  1 41 47 46 46 47 47  46 45 44 40 41 35  1  0 0 0  0\n0 0  0  0  0  1 61 60 60  1   1  1  0  0  0  0  0  0  0  0   0  0  0  0  0  1  1  1  1 43  42 41 40  1  1  1  0  0 0 0  0\n\n0 0  0  0  0  0  1  1  1  0   0  0  0  0  0  0  0  0  0  0   0  0  0  0  0  0  0  0  0  1   1  1  1  0  0  0  0  0 0 0  0\n`;\n// y is zero by default, so last row (all zeros) doesn't need to be calculated.\n\n\nAFRAME.registerGeometry('canyon-terrain', {\n  schema: {\n    spacing: {default: 10},\n    sunPosition: {type: 'vec3', default: {x:-1.0, y:1.0, z:-1.0}}\n  },\n\n  init: function (data) {\n    // Creates geometry.\n    const geometry = new THREE.PlaneGeometry((X_POINTS - 1) * data.spacing, (Z_POINTS - 1) * data.spacing, X_POINTS - 1, Z_POINTS - 1);\n    geometry.rotateX(-Math.PI / 2);\n\n    // applies elevations\n    const vertices = geometry.attributes.position.array;\n    const floatPatt = /\\s*\\S+/y;\n    let match;\n    let v = 0;\n    while (match = floatPatt.exec(terrainHeights)) {\n      let height = parseFloat(match[0]);\n      height = height * -2;\n      if (height < 0) {\n        height -= 100;\n      }\n      vertices[v * 3 + 1] = height;\n      ++v;\n    }\n\n    // computes normals that are smooth for shallow angles\n    const creasedGeometry = toCreasedNormals(geometry, 0.45 * Math.PI);\n    this.geometry = creasedGeometry;\n    geometry.dispose();\n  }\n});\n","// dark-elf.js - antagonist behavior for Elfland Glider\n// Copyright Â© 2023 by Doug Reeder; Licensed under the GNU GPL-3.0\n\n const wanderList = [\n   {animation: 'root|flying_idle',      vector: new THREE.Vector3(0, 0, 1),  far: 5},\n   {animation: 'root|flying_left',      vector: new THREE.Vector3(2, 0, 0),  far: 5},\n   {animation: 'root|flying_right',     vector: new THREE.Vector3(-2, 0, 0), far: 5},\n   {animation: 'root|flying_up',        vector: new THREE.Vector3(0, 2, 0),  far: 8},\n   {animation: 'root|flying_down',      vector: new THREE.Vector3(0, -2, 0), far: 4},\n   {animation: 'root|flying_forward',   vector: new THREE.Vector3(0, 0, 4),  far: 10},\n   {animation: 'root|flying_backwards', vector: new THREE.Vector3(0, 0, -2), far: 5},\n ]\n\nconst UP = new THREE.Vector3(0, 1, 0);\n\nAFRAME.registerComponent('dark-elf', {\n  schema: {\n    goalSelector: {type: 'selector'},\n    idleSpeed:    {default:  0.5},   // m/s\n    pursuitSpeed: {default:  5.0},   // m/s\n  },\n\n  vector: new THREE.Vector3(),\n  increment: new THREE.Vector3(),\n  isAvoidingLandcape: false,\n  facingMatrix: new THREE.Matrix4(),\n  facingQuaternion: new THREE.Quaternion(),\n\n  init() {\n    const {el} = this;\n\n    const newYRot = el.object3D.rotation.y + (Math.random() - 0.5) * Math.PI / 2;\n    const newXRot = el.object3D.rotation.x + (Math.random() - 0.5) * Math.PI / 16;\n    el.object3D.rotation.set(newXRot, newYRot, el.object3D.rotation.z);\n\n    this.setModeOrPursuit(wanderList[0]);\n\n    setInterval(this.randomMode.bind(this, el), 3000);\n\n    el.addEventListener('raycaster-intersection', (evt) => {\n      // Intersection w/ distance 0 is sometimes sent immediately\n      if (evt.detail.intersections.length > 0 && evt.detail.intersections[0].distance > 0) {\n        this.isAvoidingLandcape = true;\n        const newXRot = el.object3D.rotation.x + (Math.random() - 0.5) * Math.PI / 36;\n        el.object3D.rotation.set(newXRot, el.object3D.rotation.y, el.object3D.rotation.z);\n        this.setModeOrPursuit(wanderList[0]);\n      }\n    });\n    el.addEventListener('raycaster-intersection-cleared', (evt) => {\n      // console.log(\"cleared intersections:\", evt.detail?.clearedEls)\n      setTimeout(() => {   // keeps turning away from wall for another second\n        this.isAvoidingLandcape = false;\n        this.setModeOrPursuit(wanderList[0]);\n      }, 1000);\n    });\n  },\n\n  update(oldData) {\n    this.setModeOrPursuit(wanderList[0]);\n  },\n\n  tick(time, timeDelta) {\n    const {el} = this;\n    const hasGoal = Boolean(this.data.goalSelector?.object3D?.position);\n    if (this.isAvoidingLandcape) {\n      const newYRot = el.object3D.rotation.y + (hasGoal ? Math.PI : -Math.PI) / 180;\n      const newXRot = el.object3D.rotation.x - Math.PI / 1800;\n      el.object3D.rotation.set(newXRot, newYRot, el.object3D.rotation.z);\n      return;\n    } else if (hasGoal) {\n      this.facingMatrix.lookAt(this.data.goalSelector.object3D.position, el.object3D.position, UP);\n      this.facingQuaternion.setFromRotationMatrix(this.facingMatrix);\n      el.object3D.quaternion.rotateTowards(this.facingQuaternion, Math.PI / 180);\n\n      const distance = this.data.pursuitSpeed * timeDelta / 1000;\n      this.increment.set(0, 0, distance);\n    } else {   // wandering\n      if (el.object3D.position.y > -50) {\n        el.object3D.rotation.x = Math.PI / 36;   // keeps elf in canyon\n      }\n\n      const distance = this.data.idleSpeed * timeDelta / 1000;\n      this.increment.copy(this.vector);\n      this.increment.multiplyScalar(distance);\n    }\n    if (!(timeDelta > 0)) {\n      return;   // when timeDelta is 0 or NaN, nothing can be done\n    }\n    this.increment.applyEuler(el.object3D.rotation);\n    el.object3D.position.add(this.increment);\n  },\n\n  randomMode(el) {\n    if (this.data.goalSelector?.object3D?.position) {\n      return;\n    }\n    if (Math.random() > 0.6667) {\n      this.setMode(wanderList[Math.floor(wanderList.length * Math.random())])\n    } else {\n      this.setMode(wanderList[0]);\n    }\n  },\n\n  setModeOrPursuit(mode) {\n    if (this.data.goalSelector?.object3D?.position) {\n      this.setPursuit();\n    } else {\n      this.setMode(mode);\n    }\n  },\n\n  setMode(mode) {\n    this.el.setAttribute('animation-mixer', 'clip', mode.animation);\n\n    this.vector.copy(mode.vector);\n    this.el.setAttribute('raycaster', 'direction', {x: mode.vector.x, y: mode.vector.y, z: mode.vector.z});\n\n    this.el.setAttribute('raycaster', 'far', mode.far * this.data.idleSpeed);\n  },\n\n  setPursuit() {\n    this.el.setAttribute('animation-mixer', 'clip', 'root|flying_forward');\n\n    this.el.setAttribute('raycaster', 'direction', {x: 0, y: 0, z: 1});\n\n    this.el.setAttribute('raycaster', 'far', 5);\n  },\n});\n\n // root|flying_idle root|flying_forward root|flying_backwards\n // root|flying_left root|flying_right\n // root|flying_up root|flying_down root|flying_nose_dive\n // root|talk_cycle root|wings_flapping\n // root|idle_look_left root|idle_look_right\n","// import {\n// \tBufferAttribute,\n// \tVector3,\n// } from 'three';\n\n// Creates a new, non-indexed geometry with smooth normals everywhere except faces that meet at\n// an angle greater than the crease angle.\nfunction toCreasedNormals( geometry, creaseAngle = Math.PI / 3 /* 60 degrees */ ) {\n\n\tconst creaseDot = Math.cos( creaseAngle );\n\tconst hashMultiplier = ( 1 + 1e-10 ) * 1e2;\n\n\t// reusable vertors\n\tconst verts = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\n\tconst tempVec1 = new THREE.Vector3();\n\tconst tempVec2 = new THREE.Vector3();\n\tconst tempNorm = new THREE.Vector3();\n\tconst tempNorm2 = new THREE.Vector3();\n\n\t// hashes a vector\n\tfunction hashVertex( v ) {\n\n\t\tconst x = ~ ~ ( v.x * hashMultiplier );\n\t\tconst y = ~ ~ ( v.y * hashMultiplier );\n\t\tconst z = ~ ~ ( v.z * hashMultiplier );\n\t\treturn `${x},${y},${z}`;\n\n\t}\n\n\tconst resultGeometry = geometry.toNonIndexed();\n\tconst posAttr = resultGeometry.attributes.position;\n\tconst vertexMap = {};\n\n\t// find all the normals shared by commonly located vertices\n\tfor ( let i = 0, l = posAttr.count / 3; i < l; i ++ ) {\n\n\t\tconst i3 = 3 * i;\n\t\tconst a = verts[ 0 ].fromBufferAttribute( posAttr, i3 + 0 );\n\t\tconst b = verts[ 1 ].fromBufferAttribute( posAttr, i3 + 1 );\n\t\tconst c = verts[ 2 ].fromBufferAttribute( posAttr, i3 + 2 );\n\n\t\ttempVec1.subVectors( c, b );\n\t\ttempVec2.subVectors( a, b );\n\n\t\t// add the normal to the map for all vertices\n\t\tconst normal = new THREE.Vector3().crossVectors( tempVec1, tempVec2 ).normalize();\n\t\tfor ( let n = 0; n < 3; n ++ ) {\n\n\t\t\tconst vert = verts[ n ];\n\t\t\tconst hash = hashVertex( vert );\n\t\t\tif ( ! ( hash in vertexMap ) ) {\n\n\t\t\t\tvertexMap[ hash ] = [];\n\n\t\t\t}\n\n\t\t\tvertexMap[ hash ].push( normal );\n\n\t\t}\n\n\t}\n\n\t// average normals from all vertices that share a common location if they are within the\n\t// provided crease threshold\n\tconst normalArray = new Float32Array( posAttr.count * 3 );\n\tconst normAttr = new THREE.BufferAttribute( normalArray, 3, false );\n\tfor ( let i = 0, l = posAttr.count / 3; i < l; i ++ ) {\n\n\t\t// get the face normal for this vertex\n\t\tconst i3 = 3 * i;\n\t\tconst a = verts[ 0 ].fromBufferAttribute( posAttr, i3 + 0 );\n\t\tconst b = verts[ 1 ].fromBufferAttribute( posAttr, i3 + 1 );\n\t\tconst c = verts[ 2 ].fromBufferAttribute( posAttr, i3 + 2 );\n\n\t\ttempVec1.subVectors( c, b );\n\t\ttempVec2.subVectors( a, b );\n\n\t\ttempNorm.crossVectors( tempVec1, tempVec2 ).normalize();\n\n\t\t// average all normals that meet the threshold and set the normal value\n\t\tfor ( let n = 0; n < 3; n ++ ) {\n\n\t\t\tconst vert = verts[ n ];\n\t\t\tconst hash = hashVertex( vert );\n\t\t\tconst otherNormals = vertexMap[ hash ];\n\t\t\ttempNorm2.set( 0, 0, 0 );\n\n\t\t\tfor ( let k = 0, lk = otherNormals.length; k < lk; k ++ ) {\n\n\t\t\t\tconst otherNorm = otherNormals[ k ];\n\t\t\t\tif ( tempNorm.dot( otherNorm ) > creaseDot ) {\n\n\t\t\t\t\ttempNorm2.add( otherNorm );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ttempNorm2.normalize();\n\t\t\tnormAttr.setXYZ( i3 + n, tempNorm2.x, tempNorm2.y, tempNorm2.z );\n\n\t\t}\n\n\t}\n\n\tresultGeometry.setAttribute( 'normal', normAttr );\n\treturn resultGeometry;\n\n}\n\nexport {\n\ttoCreasedNormals\n};\n","// elfland-utils.js - common functions for Elfland Glider\n// Copyright Â© 2018-2019 P. Douglas Reeder; Licensed under the GNU GPL-3.0\n\n\nfunction goFullscreenLandscape() {\n    // desktop is fine without fullscreen (which can be enabled via headset button, anyway)\n    if (!isMagicWindow()) {return;}\n\n    let canvasEl = document.querySelector('canvas.a-canvas');\n    let requestFullscreen =\n        canvasEl.requestFullscreen ||\n        canvasEl.webkitRequestFullscreen ||\n        canvasEl.mozRequestFullScreen ||  // The capitalized `S` is not a typo.\n        canvasEl.msRequestFullscreen;\n    let promise;\n    if (requestFullscreen) {\n        promise = requestFullscreen.apply(canvasEl);\n    }\n    if (!(promise && promise.then)) {\n        promise = Promise.resolve();\n    }\n    promise.then(lockLandscapeOrientation, lockLandscapeOrientation);\n}\n\nfunction lockLandscapeOrientation() {\n    if (screen.orientation && screen.orientation.lock) {\n        screen.orientation.lock(\"landscape\").then(response => {\n            console.log(\"screen orientation locked:\", response);\n        }).catch(err => {\n            console.warn(\"screen orientation didn't lock:\", err);\n        });\n    }\n}\n\n\nfunction isDesktop() {\n    return ! (AFRAME.utils.device.isMobile() || AFRAME.utils.device.isMobileVR());\n}\n\nfunction isMagicWindow() {\n    return AFRAME.utils.device.isMobile() && ! AFRAME.scenes[0].is(\"vr-mode\");\n}\n\n\nfunction calcPosChange(verticalAngleDeg, horizontalAngleDeg, distance) {\n    let verticalAngleRad = verticalAngleDeg/180*Math.PI;\n    let altitudeChange = distance * Math.sin(verticalAngleRad);\n\n    let horizontalDistance = distance * Math.cos(verticalAngleRad);\n    let horizontalAngleRad = horizontalAngleDeg/180*Math.PI;\n    return {x: horizontalDistance * Math.cos(horizontalAngleRad),\n        y: altitudeChange,\n        z: -horizontalDistance * Math.sin(horizontalAngleRad)};\n}\n\n\nvar environmentalSound = null;\n\n/**\n * Sets the background sound for a world. It is paused when the tab is hidden.\n * @param url string or Array of strings\n * @param volume number between 0.0 and 1.0\n */\nfunction setEnvironmentalSound(url, volume) {\n    environmentalSound = new Howl({\n        src: url,\n        autoplay: true,\n        loop: true,\n        volume: volume || 1.0,\n        html5: false,\n        onplayerror: function() {\n            environmentalSound.once('unlock', function() {\n                environmentalSound.play();\n            });\n        }\n    });\n}\n\n/** Starts the background sound for a world, if it wasn't already started. */\nfunction pokeEnvironmentalSound() {\n    if (environmentalSound && ! environmentalSound.playing()) {\n        environmentalSound.play();\n    }\n}\n\ndocument.addEventListener('visibilitychange', () => {\n    if (environmentalSound) {\n        if (document.hidden) {\n            environmentalSound.pause();\n        } else {\n            environmentalSound.play();\n        }\n    }\n}, false);\n\n\n/** Web Monetization */\nif (document.monetization)  {\n    function handleMonetizationStart(evt) {\n        console.log(\"monetization started:\", evt);\n    }\n    document.monetization.addEventListener('monetizationstart', handleMonetizationStart);\n\n    function handleMonetizationStop(evt) {\n        console.log(\"monetization stopped:\", evt);\n    }\n    document.monetization.addEventListener('monetizationstop', handleMonetizationStop);\n} else {\n    console.log(\"no monetization API\");\n}\n\nexport {goFullscreenLandscape, isDesktop, isMagicWindow, calcPosChange, setEnvironmentalSound, pokeEnvironmentalSound};\n","/*!\n * Copyright 2015 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\n \n/*\n * @see https://developers.google.com/web/updates/2015/08/using-requestidlecallback\n */\nwindow.requestIdleCallback = window.requestIdleCallback ||\n  function (cb) {\n    return setTimeout(function () {\n      var start = Date.now();\n      cb({ \n        didTimeout: false,\n        timeRemaining: function () {\n          return Math.max(0, 50 - (Date.now() - start));\n        }\n      });\n    }, 1);\n  }\n\nwindow.cancelIdleCallback = window.cancelIdleCallback ||\n  function (id) {\n    clearTimeout(id);\n  } ","// state.js - state model for Elfland Glider\n// Copyright Â© 2017-2023 P. Douglas Reeder; Licensed under the GNU GPL-3.0\n//\n\nimport './shim/requestIdleCallback'\nimport {goFullscreenLandscape, isDesktop, isMagicWindow, calcPosChange, pokeEnvironmentalSound} from './elfland-utils'\n\nconst GRAVITY = 9.807;   // m/s^2\nconst HUMAN_EYE_ELBOW_DISTANCE = 0.56;   // m\nconst DIFFICULTY_VR = 0.75;\nconst DIFFICULTY_MAGIC_WINDOW = 0.6;\nconst DIFFICULTY_KEYBOARD = 0.5;\nconst POWERUP_BOOST = 16;\nconst BAD_CRASH_SPEED = 30;\n\nAFRAME.registerState({\n    initialState: {\n        armatureEl: null,\n        gliderEl: null,\n        cameraEl: null,\n        leftHandEl: null,\n        rightHandEl: null,\n        controllerConnections: {},\n        isAnyPressedLeft: false,\n        isAnyPressedRight: false,\n        xSetting: 0,\n        zSetting: 0,\n        controlStickEl: null,\n        controlNeutralHeight: 0.95,\n        controlMode: 'HEAD',   // or 'HANDS'\n        controlSubmode: 'NONE',   // or 'LEFT' or 'RIGHT'\n        time: 0,\n        difficulty: DIFFICULTY_MAGIC_WINDOW,\n        gliderPosition: {x:-30, y:15, z:30},\n        gliderPositionStart: {x:-30, y:15, z:30},\n        gliderRotationX: 0,\n        gliderRotationY: -45,\n        gliderRotationZ: 0,\n        gliderRotationYStart: -45,\n        isFlying: false,\n        gliderSpeed: 5,\n        numYellowStars: Math.POSITIVE_INFINITY,\n        stars: 0,\n        questComplete: false,\n        inventory: {},   // keyed by object ID\n        hudVisible: true,\n        hudAirspeedAngle: 0,\n        hudAirspeedColor: 'forestgreen',\n        controlsReminderDisplayed: false,\n        debug: false   // no way to enable this yet\n    },\n\n    handlers: {\n        setState: function (state, values) {\n            for (let pName in values) {\n                if (pName !== 'target') {\n                    console.log(\"setting\", pName, values[pName]);\n                    state[pName] = values[pName];\n                }\n            }\n        },\n\n        setArmatureEl: function (state, armatureEl) {\n            this.powerup = new Howl({src: ['../assets/411460__inspectorj__power-up-bright-a.mp3']});\n\n            console.log(\"hasNativeWebXRImplementation:\", window.hasNativeWebXRImplementation);\n            console.log(\"hasNativeWebVRImplementation:\", window.hasNativeWebVRImplementation);\n            console.log(\"isMobile:\", AFRAME.utils.device.isMobile());\n            console.log(\"isMobileVR:\", AFRAME.utils.device.isMobileVR());\n\n            state.armatureEl = armatureEl;\n            state.gliderEl = armatureEl.querySelector('#glider');\n            state.cameraEl = armatureEl.querySelector('[camera]');\n\n            let dustEl = AFRAME.scenes[0].querySelector('a-dust');\n            if (dustEl) {\n                requestIdleCallback(() => {   // delays setup until there's some slack time\n                    dustEl.components.dust.setCamera(state.armatureEl);\n                }, {timeout: 10_000});\n            }\n\n            let bodyEl = state.armatureEl.querySelector('#body');\n            let wingEl = state.gliderEl.querySelector('#wing');\n            let hudEl = armatureEl.querySelector('#hud');\n            this.adjustForMagicWindow(wingEl);\n            if (AFRAME.scenes[0].is(\"vr-mode\") && AFRAME.utils.device.checkHeadsetConnected()) {\n                this.adjustHudForVR(hudEl);\n                state.difficulty = DIFFICULTY_VR;\n            } else {\n                this.adjustHudForFlat(hudEl);\n                if (isMagicWindow()) {\n                    state.difficulty = DIFFICULTY_MAGIC_WINDOW;\n                } else {\n                    state.difficulty = DIFFICULTY_KEYBOARD;\n                }\n            }\n            AFRAME.scenes[0].addEventListener('enter-vr', (event) => {\n                if (AFRAME.utils.device.checkHeadsetConnected()) {\n                    bodyEl.object3D.position.y = -1.6;\n                    this.adjustHudForVR(hudEl);\n                    this.adjustForMagicWindow(wingEl);\n                    state.difficulty = DIFFICULTY_VR;\n                }\n                pokeEnvironmentalSound();\n            });\n            AFRAME.scenes[0].addEventListener('exit-vr', (event) => {\n                // bodyEl.object3D.position.y = 0;   // Why is this unnecessary?\n                this.adjustHudForFlat(hudEl);\n                this.adjustForMagicWindow(wingEl);\n                if (isMagicWindow()) {\n                    state.difficulty = DIFFICULTY_MAGIC_WINDOW;\n                } else {\n                    state.difficulty = DIFFICULTY_KEYBOARD;\n                }\n            });\n\n            if (isDesktop() && !AFRAME.utils.device.checkHeadsetConnected()) {\n                console.log(\"desktop w/o headset; disabling look-controls so keyboard controls can function\");\n                state.cameraEl.setAttribute('look-controls', 'enabled', 'false');\n            }\n\n            state.gliderEl.addEventListener('raycaster-intersection', (evt) => {\n                // Intersection w/ distance 0 is sometimes sent immediately\n                if (evt.detail.intersections.length > 0 && evt.detail.intersections[0].distance > 0) {\n                    console.log(\"CRASH!\", evt.detail.els[0].tagName,\n                        evt.detail.intersections[0].distance,\n                        state.gliderEl.getAttribute('raycaster').far, state.gliderSpeed/4);\n                    AFRAME.scenes[0].emit('hover', {});\n                    let crash = new Howl({src: ['../assets/198876__bone666138__crash.mp3']});\n                    crash.play();\n\n                    setTimeout(() => {\n                        if (state.gliderSpeed >= BAD_CRASH_SPEED) {\n                            sessionStorage.setItem('returnWorld', location.pathname);\n                            location.assign('../ginnungagap/');\n                        } else {\n                            // console.log(\"setting start position\", state.gliderPositionStart);\n                            state.gliderPosition.x = state.gliderPositionStart.x;\n                            state.gliderPosition.y = state.gliderPositionStart.y;\n                            state.gliderPosition.z = state.gliderPositionStart.z;\n                            state.gliderRotationX = 0;\n                            state.gliderRotationY = state.gliderRotationYStart;\n                            state.gliderSpeed = 5;\n                            this.controlStickToNeutral(state);\n                            state.hudAirspeedAngle = 0;\n                            state.hudAirspeedColor = 'forestgreen';\n                            state.cameraEl.object3D.rotation.x = 0;   // only takes effect when look-controls disabled\n                            state.cameraEl.object3D.rotation.y = 0;\n                            state.cameraEl.object3D.rotation.z = 0;\n                            setTimeout(this.showControlsReminder.bind(this, state), 3000);\n                        }\n                    }, 2000)\n                }\n            });\n\n            armatureEl.addEventListener('hitstart', (evt) => {\n                // console.log('hitstart armature:', evt.detail.intersectedEls);\n                evt.detail.intersectedEls.forEach( (el) => {\n                    if (el.classList.contains('powerup')) {\n                        console.log(\"powerup\");\n                        state.gliderSpeed += POWERUP_BOOST;\n                        this.powerup.play();\n                    } else if (el.classList.contains('star')) {\n                        ++state.stars;\n                        console.log(\"collected star\", state.stars, \"of\", state.numYellowStars);\n                        el.parentNode.removeChild(el);\n                        this.ding.play();\n                    } else if ('key' === el.id) {\n                        state.questComplete = true;\n                        let horncall = new Howl({src: ['../assets/361684__taranp__horncall-strauss1-eflatmajor_incipit.mp3']});\n                        horncall.play();\n                        el.parentNode.removeChild(el);\n                        for (const entity of document.querySelectorAll('[dark-elf]')) {\n                            console.info(\"dark elf pursuing\");\n                            entity.setAttribute('dark-elf', 'goalSelector', '#armature');\n                        }\n                    } else if (el.classList.contains('proximitySound')) {\n                        let url = el.getAttribute('data-sound-url');\n                        let volume = el.getAttribute('data-sound-volume') || 1.0;\n                        if (url) {\n                            new Howl({src: url, volume: volume, autoplay: true});\n                        }\n                        let text = el.getAttribute('data-text');\n                        let subtitle = AFRAME.scenes[0].querySelector('#subtitle');\n                        if (text && subtitle) {\n                            subtitle.setAttribute('value', text);\n                            setTimeout(() => {\n                                subtitle.setAttribute('value', \"\");\n                            }, 5000);\n                        }\n                   } else if (el.components.link) {\n                       console.log(\"hit link\");\n                       if (! /ginnungagap/.test(location.pathname)) {\n                           sessionStorage.setItem('previousWorld', location.pathname);\n                       }\n                   }\n                });\n            });\n\n            // state doesn't have an init, so we'll register this here.\n            // desktop controls\n            document.addEventListener('keydown', function(evt) {\n                // console.log('keydown:', evt.code);\n                var cameraRotation = state.cameraEl.getAttribute('rotation');\n                switch (evt.code) {\n                    case 'KeyA':\n                    case 'ArrowLeft':\n                        state.cameraEl.object3D.rotation.z += 0.07;\n                        break;\n                    case 'KeyD':\n                    case 'ArrowRight':\n                        state.cameraEl.object3D.rotation.z -= 0.07;\n                        break;\n                    case 'KeyW':\n                    case 'ArrowUp':\n                        state.cameraEl.object3D.rotation.x += 0.045;\n                        break;\n                    case 'KeyS':\n                    case 'ArrowDown':\n                        state.cameraEl.object3D.rotation.x -= 0.045;\n                        break;\n                    case 'Space':\n                        if (!state.isFlying) {\n                            AFRAME.scenes[0].emit('launch', evt);\n                        } else {\n                            if (state.debug) {\n                                AFRAME.scenes[0].emit('hover', evt);\n                            }\n                        }\n                        break;\n                    case 'Enter':\n                        state.hudVisible = ! state.hudVisible;\n                        break;\n                }\n            }, false);\n\n            // two-controller steering\n\n            state.leftHandEl = document.getElementById(\"leftHand\");\n            state.rightHandEl = document.getElementById(\"rightHand\");\n            if (isDesktop()) {\n                state.leftHandEl.setAttribute('hand-controls', 'handModelStyle', 'highPoly');\n                state.rightHandEl.setAttribute('hand-controls', 'handModelStyle', 'highPoly');\n            }\n\n            this.leftDownHandler = this.handHandler.bind(this, 'LEFT', 'DOWN', state);\n            this.leftUpHandler = this.handHandler.bind(this, 'LEFT', 'UP', state);\n            this.rightDownHandler = this.handHandler.bind(this, 'RIGHT', 'DOWN', state);\n            this.rightUpHandler = this.handHandler.bind(this, 'RIGHT', 'UP', state);\n\n            state.controlStickEl = document.getElementById('controlStick');\n        },\n\n        controllerconnected: function (state, evt) {   // evt is name and component; this is state obj\n            state.controllerConnections[evt.component.el.id] = true;\n            this.adjustControlMode(state);\n        },\n        controllerdisconnected: function (state, evt) {\n            state.controllerConnections[evt.component.el.id] = false;\n            this.adjustControlMode(state);\n        },\n        adjustControlMode: function (state) {\n            const oldControlMode =  state.controlMode;\n            if (state.controllerConnections.leftHand || state.controllerConnections.rightHand) {\n                state.controlMode = 'HANDS';\n            } else {\n                state.controlMode = 'HEAD';\n            }\n            if (state.controlMode !== oldControlMode) {\n                console.log(\"changed control mode from\", oldControlMode, \"to\", state.controlMode);\n                if (state.controlMode === 'HANDS') {\n                    state.leftHandEl?.addEventListener('buttondown', this.leftDownHandler);\n                    state.leftHandEl?.addEventListener('buttonup', this.leftUpHandler);\n                    state.rightHandEl?.addEventListener('buttondown', this.rightDownHandler);\n                    state.rightHandEl?.addEventListener('buttonup', this.rightUpHandler);\n\n                    this.controlStickToNeutral(state);\n                    state.controlStickEl.object3D.visible = true;\n                } else if (state.controlMode === 'HEAD') {\n                    state.leftHandEl?.removeEventListener('buttondown', this.leftDownHandler);\n                    state.leftHandEl?.removeEventListener('buttonup', this.leftUpHandler);\n                    state.rightHandEl?.removeEventListener('buttondown', this.rightDownHandler);\n                    state.rightHandEl?.removeEventListener('buttonup', this.rightUpHandler);\n\n                    state.controlStickEl.object3D.visible = false;\n                }\n            }\n        },\n        handHandler: function handHandler(handedness, upDown, state, evt) {\n            const wasAnyPressedLeft = state.isAnyPressedLeft;\n            const trackedControlsLeft = state.leftHandEl?.components['tracked-controls'];\n            const buttonsLeft = trackedControlsLeft &&\n                    trackedControlsLeft.controller &&\n                    trackedControlsLeft.controller.gamepad &&\n                    trackedControlsLeft.controller.gamepad.buttons;\n            if (buttonsLeft) {\n                state.isAnyPressedLeft = false;\n                for (let i = 0; i < buttonsLeft.length; ++i) {   // not a JavaScript array\n                    if (buttonsLeft[i].pressed) {\n                        state.isAnyPressedLeft = true;\n                    }\n                }\n            } else if ('LEFT' === handedness) {\n                state.isAnyPressedLeft = 'DOWN' === upDown;   // hack\n            }\n\n            const wasAnyPressedRight = state.isAnyPressedRight;\n            const trackedControlsRight = state.rightHandEl?.components['tracked-controls'];\n            const buttonsRight = trackedControlsRight &&\n                    trackedControlsRight.controller &&\n                    trackedControlsRight.controller.gamepad &&\n                    trackedControlsRight.controller.gamepad.buttons;\n            if (buttonsRight) {\n                state.isAnyPressedRight = false;\n                for (let i = 0; i < buttonsRight.length; ++i) {   // not a JavaScript array\n                    if (buttonsRight[i].pressed) {\n                        state.isAnyPressedRight = true;\n                    }\n                }\n            } else if ('RIGHT' === handedness) {\n                state.isAnyPressedRight = 'DOWN' === upDown;   // hack\n            }\n\n            if (state.isAnyPressedLeft && ! wasAnyPressedLeft) {\n                switch (state.controlSubmode) {\n                    case 'LEFT':\n                        state.controlSubmode = 'NONE';\n                        break;\n                    case 'RIGHT':\n                    case 'NONE':\n                        state.controlSubmode = 'LEFT';\n                        break;\n                }\n            } else if (state.isAnyPressedRight && ! wasAnyPressedRight) {\n                switch (state.controlSubmode) {\n                    case 'RIGHT':\n                        state.controlSubmode = 'NONE';\n                        break;\n                    case 'LEFT':\n                    case 'NONE':\n                        state.controlSubmode = 'RIGHT';\n                        break;\n                }\n            }\n            console.log(\"controlSubmode:\", state.controlSubmode);\n        },\n        controlStickToNeutral: function (state) {\n            if (state.controlStickEl) {\n                const cameraPos = state.cameraEl.getAttribute(\"position\");\n                state.controlNeutralHeight = cameraPos.y - HUMAN_EYE_ELBOW_DISTANCE;\n                state.controlStickEl.setAttribute('position', {x: 0, y: state.controlNeutralHeight, z: -0.4});\n                state.controlStickEl.setAttribute('rotation', {x: 0, y: 0, z: 0});\n                state.xSetting = 0;\n                state.zSetting = 0;\n            }\n        },\n\n\n        // aframe-button-controls: any controller button, or scene touch\n        buttondown: function (state, action) {\n            // console.log(\"buttondown\", action);\n            if (!state.isFlying) {\n                AFRAME.scenes[0].emit('launch', action);\n            } else {\n                if (state.debug) {\n                    AFRAME.scenes[0].emit('hover', action);\n                }\n            }\n        },\n\n        countYellowStars: function (state, action) {\n            state.numYellowStars = AFRAME.scenes[0].querySelectorAll('.star').length;\n            console.log(\"numYellowStars:\", state.numYellowStars);\n            if (state.numYellowStars) {\n                this.ding = new Howl({src: ['../assets/393633__daronoxus__ding.mp3']});\n            }\n        },\n\n        launch: function (state, action) {\n            console.log(\"launch\", action);\n\n            state.isFlying = true;\n\n            state.controlsReminderDisplayed = false;\n            let prelaunchHelp = AFRAME.scenes[0].querySelector('#prelaunchHelp');\n            if (prelaunchHelp) {\n                prelaunchHelp.setAttribute('value', \"\");\n            }\n            goFullscreenLandscape();\n\n            let postlaunchHelp = AFRAME.scenes[0].querySelector('#postlaunchHelp');\n            if (postlaunchHelp && postlaunchHelp.src) {\n                let postlaunchHelpAudio = new Howl({src: [postlaunchHelp.src]});\n                setTimeout(() => {\n                    postlaunchHelpAudio.play();\n                }, 60000);\n            }\n        },\n        hover: function (state, action) {\n            console.log(\"hover\", action);\n\n            state.isFlying = false;\n        },\n\n        loaded: function (state, action) {\n            // console.log(\"loaded\", state, action);\n            let intro = document.getElementById('intro');\n            if (!intro) {\n                this.startInteraction(state);\n            }\n        },\n\n        'enter-vr': function (state) {\n            // console.log(\"enter-vr\");\n            this.startInteraction(state);\n        },\n        'exit-vr': function (state, action) {\n            // console.log(\"exit-vr\", action);\n            if (state.controlsReminderDisplayed) {\n                this.showControlsReminder(state);   // updates list of controls for flat screen\n            }\n\n            let intro = document.getElementById('intro');\n            if (intro) {\n                AFRAME.scenes[0].emit('hover', action);\n            }\n        },\n        startInteraction: function (state) {\n            if (state.controlsReminderDisplayed) {\n                this.showControlsReminder(state);   // updates list of controls\n            } else {\n                setTimeout(this.showControlsReminder.bind(this, state), 10000);\n            }\n        },\n        showControlsReminder: function (state) {\n            let prelaunchHelp = AFRAME.scenes[0].querySelector('#prelaunchHelp');\n            let intro = document.getElementById('intro');\n            if (prelaunchHelp && (!intro || AFRAME.scenes[0].is(\"vr-mode\")) && !state.isFlying) {\n                state.controlsReminderDisplayed = true;\n                if (AFRAME.scenes[0].is(\"vr-mode\") && AFRAME.utils.device.checkHeadsetConnected() || AFRAME.utils.device.isMobileVR()) {\n                    prelaunchHelp.setAttribute('value', \"The wing above you\\npoints where you're flying.\\n\\nTilt left: turn left\\nTilt right: turn right\\nTilt back: climb & slow down\\nTilt forward: dive & speed up\\nTrigger, button or touchpad: launch\");\n                } else if (AFRAME.utils.device.isMobile()) {\n                    prelaunchHelp.setAttribute('value', \"The wing above you\\npoints where you're flying.\\n\\nRoll your device left: turn left\\nRoll your device right: turn right\\nTilt up: climb & slow down\\nTilt down: dive & speed up\\nTap screen: launch\");\n                } else {\n                    prelaunchHelp.setAttribute('value', \"The wing above you\\npoints where you're flying.\\n\\nA: turn left\\nD: turn right\\nW: climb (& slow down)\\nS: dive (& speed up)\\nSpace bar: launch\");\n                }\n            }\n        },\n\n        iterate: function (state, action) {\n            // A pause in the action is better than flying blind\n            action.timeDelta = Math.min(action.timeDelta, 100);\n            state.time += action.timeDelta * state.difficulty;\n\n            switch (state.controlMode) {\n                case \"HEAD\":\n                    let cameraRotation = state.cameraEl.getAttribute('rotation');\n                    if (!cameraRotation) {\n                        console.warn(\"camera rotation not available\");\n                        return;\n                    }\n\n                    let cameraRotX = isMagicWindow() ? cameraRotation.x + 20 : cameraRotation.x;\n                    state.xSetting = cameraRotX;\n                    state.zSetting = cameraRotation.z;\n                    break;\n                case \"HANDS\":\n                    const leftHandPos = state.leftHandEl?.getAttribute(\"position\");\n                    const rightHandPos = state.rightHandEl?.getAttribute(\"position\");\n                    switch (state.controlSubmode) {\n                        case \"LEFT\":\n                            const leftHandRot = state.leftHandEl?.getAttribute('rotation');\n\n                            state.controlStickEl.setAttribute('position', leftHandPos);\n                            state.controlStickEl.setAttribute('rotation', leftHandRot);\n\n                            state.xSetting = leftHandRot.x;\n                            state.zSetting = leftHandRot.z;\n                            break;\n                        case \"RIGHT\":\n                            const rightHandRot = state.rightHandEl?.getAttribute('rotation');\n\n                            state.controlStickEl.setAttribute('position', rightHandPos);\n                            state.controlStickEl.setAttribute('rotation', rightHandRot);\n\n                            state.xSetting = rightHandRot.x;\n                            state.zSetting = rightHandRot.z;\n                            break;\n                        case \"NONE\":\n                            // TODO: slow decay to neutral?\n                            break;\n                    }\n                    break;\n            }\n            let xDiff = state.xSetting - state.gliderRotationX;\n            let xChange = (xDiff + Math.sign(xDiff)*15) * (action.timeDelta / 1000);\n            if (Math.abs(xChange) > Math.abs(xDiff)) {\n                xChange = xDiff;\n            }\n            let newXrot = state.gliderRotationX + xChange;\n            newXrot = Math.max(newXrot, -75);\n            newXrot = Math.min(newXrot, 75);\n            state.gliderRotationX = newXrot;\n\n            let zDiff = state.zSetting - state.gliderRotationZ;\n            let zChange = (zDiff + Math.sign(zDiff)*15) * (action.timeDelta / 1000);\n            if (Math.abs(zChange) > Math.abs(zDiff)) {\n                zChange = zDiff;\n            }\n            let newZrot = state.gliderRotationZ + zChange;\n            newZrot = Math.max(newZrot, -70);\n            newZrot = Math.min(newZrot, 70);\n            state.gliderRotationZ = newZrot;\n\n            let deltaHeading = state.gliderRotationZ * action.timeDelta / 1000;\n            state.gliderRotationY = (state.gliderRotationY + deltaHeading + 180) % 360 - 180;\n\n            if (state.isFlying) {\n                let distance = state.gliderSpeed * action.timeDelta / 1000;\n\n                let posChange = calcPosChange(state.gliderRotationX, state.gliderRotationY+90, distance);\n                let altitudeChange = posChange.y;\n                state.gliderPosition.x += posChange.x;\n                state.gliderPosition.y += altitudeChange;\n                state.gliderPosition.z += posChange.z;\n\n                let speedChange = (-Math.sign(altitudeChange) * Math.sqrt(2 * GRAVITY * Math.abs(altitudeChange)) -\n                                0.0005 * state.gliderSpeed * state.gliderSpeed)\n                        * action.timeDelta / 1000;\n                state.gliderSpeed = Math.max(state.gliderSpeed + speedChange, 0.1);\n                state.gliderSpeed = Math.min(state.gliderSpeed, 99.4);\n\n                state.hudAirspeedAngle = Math.min(state.gliderSpeed * 9, 359);\n                state.hudAirspeedColor = state.gliderSpeed < BAD_CRASH_SPEED ? 'forestgreen' : 'goldenrod';\n\n                state.gliderEl.setAttribute('raycaster', 'far', state.gliderSpeed/4);\n            }\n        },\n\n        placeInGliderPath: function (state, action) {\n            // console.log(\"placeInGliderPath:\", action);\n            let verticalAngleDeg = state.gliderRotationX + (Math.random()-0.5) * action.variation;\n            let horizontalAngleDeg = state.gliderRotationY + 90 + (Math.random()-0.5) * action.variation;\n            let posChange = calcPosChange(verticalAngleDeg, horizontalAngleDeg, action.distance);\n            let newPos = {x: state.gliderPosition.x + posChange.x,\n                y: state.gliderPosition.y + posChange.y,\n                z: state.gliderPosition.z + posChange.z};\n            action.el.setAttribute('position', newPos);\n            action.el.setAttribute('rotation', 'y', state.gliderRotationY);\n        },\n\n        adjustForMagicWindow: function (wingEl) {\n            if (! isMagicWindow()) {\n                wingEl.object3D.rotation.x = 0;\n                wingEl.object3D.scale.set(1, 1, 1);\n            } else {\n                wingEl.object3D.rotation.x = THREE.MathUtils.degToRad(-30.0);\n                wingEl.object3D.scale.set(1, 1, 3);\n            }\n        },\n\n        adjustHudForVR: function (hudEl) {\n            if (AFRAME.utils.device.isMobile()) {\n                hudEl.object3D.position.x = 0.30;\n                hudEl.object3D.position.y = 0.30;\n            } else {\n                hudEl.object3D.position.x = 0.40;\n                hudEl.object3D.position.y = 0.42;\n            }\n            hudEl.object3D.rotation.x = THREE.MathUtils.degToRad(25.0);\n            hudEl.object3D.rotation.y = THREE.MathUtils.degToRad(-15.0);\n        },\n\n        adjustHudForFlat: function (hudEl) {\n            if (isDesktop()) {\n                hudEl.object3D.position.x = 0.85;\n                hudEl.object3D.position.y = 0.45;\n                hudEl.object3D.rotation.x = 0.0;\n                hudEl.object3D.rotation.y = 0.0;\n            } else {\n                hudEl.object3D.position.x = 0.70;\n                hudEl.object3D.position.y = 0.15;\n                hudEl.object3D.rotation.x = THREE.MathUtils.degToRad(15.0);\n                hudEl.object3D.rotation.y = THREE.MathUtils.degToRad(-20.0);\n            }\n        }\n    },\n\n    computeState: function (newState, payload) {\n        try {\n            if (!newState.questComplete) {\n                newState.questComplete = newState.numYellowStars <= 0 || newState.stars / newState.numYellowStars >= 0.95;\n                if (newState.questComplete) {\n                    let horncall = new Howl({src: ['../assets/361684__taranp__horncall-strauss1-eflatmajor_incipit.mp3']});\n                    horncall.play();\n                }\n            }\n        } catch (err) {\n            console.error(err);\n        }\n    }\n});\n\nAFRAME.registerComponent('armature-tick-state', {\n    init: function () {\n        AFRAME.scenes[0].emit('setArmatureEl', this.el);\n    },\n\n    tick: function (time, timeDelta) {\n        AFRAME.scenes[0].emit('iterate', {time: time, timeDelta: timeDelta});\n    }\n});\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// canyon.js - maneuvering in cramped spaces, for Elfland Glider\n// Copyright Â© 2019-2020 P. Douglas Reeder; Licensed under the GNU GPL-3.0\n\n// import {setEnvironmentalSound} from \"../src/elfland-utils\";\nimport '../src/state.js'\nimport './canyon-terrain'\nimport '../assets/land-shader.js'\nimport {darkElf} from './dark-elf'\n// import '../src/intro.js'\n\n\nconst INITIAL_POSITION = {x:-1, y:-100, z:48};\nconst INITIAL_ROTATION_X = 0;\nconst INITIAL_ROTATION_Y = -175;\n\nAFRAME.registerComponent('canyon', {\n    init: function () {\n        let sceneEl = this.el;\n        sceneEl.emit('setState', {\n            gliderPositionStart: INITIAL_POSITION,\n            gliderPosition: {x: INITIAL_POSITION.x, y: INITIAL_POSITION.y, z: INITIAL_POSITION.z},\n            gliderRotationX: INITIAL_ROTATION_X,\n            gliderRotationY: INITIAL_ROTATION_Y,\n            gliderRotationYStart: INITIAL_ROTATION_Y\n        });\n\n        // sceneEl.emit('countYellowStars', {});\n\n        this.positionSph = new THREE.Spherical(1, Math.PI/2, 0);\n        this.position = new THREE.Vector3();\n        this.sss = document.querySelector('a-simple-sun-sky');\n        this.landscapeEls = document.getElementsByClassName('landscape');\n    },\n\n    tick: function (time) {\n        this.positionSph.phi = Math.PI * (0.25 + 0.2 * Math.sin(Math.PI * (time / 120000 - 0.5)));\n        this.positionSph.theta = Math.PI * time / 120000;\n        this.position.setFromSpherical(this.positionSph);\n        let positionStr = this.position.x + ' ' + this.position.y + ' ' + this.position.z;\n        this.sss.setAttribute('sun-position', positionStr);\n        for (const el of this.landscapeEls) {\n            el.setAttribute('material', 'sunPosition', positionStr);\n        }\n    }\n});\n"],"names":[],"sourceRoot":""}