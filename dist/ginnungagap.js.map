{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/elfland-utils.js","webpack:///./src/state.js","webpack:///./ginnungagap/ginnungagap.js","webpack:///./src/shim/requestIdleCallback.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","goFullscreenLandscape","isMagicWindow","promise","canvasEl","document","querySelector","requestFullscreen","webkitRequestFullscreen","mozRequestFullScreen","msRequestFullscreen","apply","then","Promise","resolve","lockLandscapeOrientation","screen","orientation","lock","response","console","log","catch","err","warn","isDesktop","AFRAME","utils","device","isMobile","isMobileVR","scenes","is","calcPosChange","verticalAngleDeg","horizontalAngleDeg","distance","verticalAngleRad","Math","PI","altitudeChange","sin","horizontalDistance","cos","horizontalAngleRad","x","y","z","__webpack_exports__","setEnvironmentalSound","pokeEnvironmentalSound","barFromHands","environmentalSound","url","volume","Howl","src","autoplay","loop","html5","onplayerror","once","play","playing","leftHand","rightHand","position","rotation","atan2","addEventListener","hidden","pause","_elfland_utils__WEBPACK_IMPORTED_MODULE_1__","registerState","initialState","armatureEl","gliderEl","cameraEl","leftHandEl","rightHandEl","controllerConnections","isAnyPressedLeft","isAnyPressedRight","controlBarEl","controlNeutralHeight","controlMode","controlSubmode","time","difficulty","gliderPosition","gliderPositionStart","gliderRotationX","gliderRotationY","gliderRotationZ","gliderRotationYStart","isFlying","gliderSpeed","numYellowStars","POSITIVE_INFINITY","stars","questComplete","inventory","hudVisible","hudText","controlsReminderDisplayed","debug","handlers","setState","state","values","pName","setArmatureEl","this","powerup","window","hasNativeWebXRImplementation","hasNativeWebVRImplementation","dustEl","requestIdleCallback","components","dust","setCamera","bodyEl","wingEl","hudEl","adjustForMagicWindow","checkHeadsetConnected","adjustHudForVR","adjustHudForFlat","event","object3D","setAttribute","evt","detail","intersections","length","els","tagName","getAttribute","far","emit","setTimeout","sessionStorage","setItem","location","pathname","showControlsReminder","intersectedEls","forEach","el","classList","contains","parentNode","removeChild","ding","text","subtitle","link","code","getElementById","leftDownHandler","handHandler","leftUpHandler","rightDownHandler","rightUpHandler","controllerconnected","component","id","adjustControlMode","controllerdisconnected","oldControlMode","cameraPos","visible","removeEventListener","handedness","upDown","gamepadLeft","controller","gamepad","buttons","buttonsLeft","pressed","gamepadRight","buttonsRight","leftHandPos","rightHandPos","min","max","buttondown","action","countYellowStars","querySelectorAll","launch","prelaunchHelp","postlaunchHelp","postlaunchHelpAudio","hover","loaded","startInteraction","enter-vr","exit-vr","intro","iterate","xSetting","zSetting","timeDelta","cameraRotation","leftHandRot","rightHandRot","xDiff","xChange","sign","abs","newXrot","zDiff","zChange","newZrot","deltaHeading","posChange","speedChange","sqrt","toFixed","placeInGliderPath","random","variation","newPos","THREE","degToRad","scale","set","computeState","newState","payload","oldQuestComplete","error","registerComponent","init","tick","_src_elfland_utils__WEBPACK_IMPORTED_MODULE_0__","sceneEl","rain","createElement","preset","particleCount","appendChild","clouds","placeCloud","pool__clouds","returnEntity","shift","cloudEl","requestEntity","opacity","intervalID","setInterval","clearInterval","push","armaturePosition","returnPath","getItem","returnPortal","returnPortalEl","cloud","distanceTo","rotationZ","lookAt","cb","start","Date","now","didTimeout","timeRemaining","cancelIdleCallback","clearTimeout"],"mappings":"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","file":"ginnungagap.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 19);\n","// elfland-utils.js - common functions for Elfland Glider\n// Copyright © 2018-2019 P. Douglas Reeder; Licensed under the GNU GPL-3.0\n\n\nfunction goFullscreenLandscape() {\n    // desktop is fine without fullscreen (which can be enabled via headset button, anyway)\n    if (!isMagicWindow()) {return;}\n\n    let canvasEl = document.querySelector('canvas.a-canvas');\n    let requestFullscreen =\n        canvasEl.requestFullscreen ||\n        canvasEl.webkitRequestFullscreen ||\n        canvasEl.mozRequestFullScreen ||  // The capitalized `S` is not a typo.\n        canvasEl.msRequestFullscreen;\n    let promise;\n    if (requestFullscreen) {\n        promise = requestFullscreen.apply(canvasEl);\n    }\n    if (!(promise && promise.then)) {\n        promise = Promise.resolve();\n    }\n    promise.then(lockLandscapeOrientation, lockLandscapeOrientation);\n}\n\nfunction lockLandscapeOrientation() {\n    if (screen.orientation && screen.orientation.lock) {\n        screen.orientation.lock(\"landscape\").then(response => {\n            console.log(\"screen orientation locked:\", response);\n        }).catch(err => {\n            console.warn(\"screen orientation didn't lock:\", err);\n        });\n    }\n}\n\n\nfunction isDesktop() {\n    return ! (AFRAME.utils.device.isMobile() || AFRAME.utils.device.isMobileVR());\n}\n\nfunction isMagicWindow() {\n    return AFRAME.utils.device.isMobile() && ! AFRAME.scenes[0].is(\"vr-mode\");\n}\n\n\nfunction calcPosChange(verticalAngleDeg, horizontalAngleDeg, distance) {\n    let verticalAngleRad = verticalAngleDeg/180*Math.PI;\n    let altitudeChange = distance * Math.sin(verticalAngleRad);\n\n    let horizontalDistance = distance * Math.cos(verticalAngleRad);\n    let horizontalAngleRad = horizontalAngleDeg/180*Math.PI;\n    return {x: horizontalDistance * Math.cos(horizontalAngleRad),\n        y: altitudeChange,\n        z: -horizontalDistance * Math.sin(horizontalAngleRad)};\n}\n\n\nvar environmentalSound = null;\n\n/**\n * Sets the background sound for a world. It is paused when the tab is hidden.\n * @param url string or Array of strings\n * @param volume number between 0.0 and 1.0\n */\nfunction setEnvironmentalSound(url, volume) {\n    environmentalSound = new Howl({\n        src: url,\n        autoplay: true,\n        loop: true,\n        volume: volume || 1.0,\n        html5: false,\n        onplayerror: function() {\n            environmentalSound.once('unlock', function() {\n                environmentalSound.play();\n            });\n        }\n    });\n}\n\n/** Starts the background sound for a world, if it wasn't already started. */\nfunction pokeEnvironmentalSound() {\n    if (environmentalSound && ! environmentalSound.playing()) {\n        environmentalSound.play();\n    }\n}\n\ndocument.addEventListener('visibilitychange', () => {\n    if (environmentalSound) {\n        if (document.hidden) {\n            environmentalSound.pause();\n        } else {\n            environmentalSound.play();\n        }\n    }\n}, false);\n\n\nfunction barFromHands(leftHand, rightHand) {\n    let position = {\n        x:(leftHand.x + rightHand.x) / 2,\n        y:(leftHand.y + rightHand.y) / 2,\n        z:(leftHand.z + rightHand.z) / 2\n    };\n    if (leftHand.x - rightHand.x > -0.02) {   // limit rotation\n        leftHand = {x:position.x - 0.01, y:leftHand.y, z:leftHand.z};\n        rightHand = {x:position.x + 0.01, y:rightHand.y, z:rightHand.z};\n    }\n    let rotation = {\n        x:0,\n        y:Math.atan2(rightHand.z - leftHand.z, rightHand.x - leftHand.x) * -180 / Math.PI,\n        z:Math.atan2(rightHand.y - leftHand.y, rightHand.x - leftHand.x) * 180 / Math.PI\n    };\n    return {position, rotation};\n}\n\nexport {goFullscreenLandscape, isDesktop, isMagicWindow, calcPosChange, setEnvironmentalSound, pokeEnvironmentalSound,\n    barFromHands};\n","// state.js - state model for Elfland Glider\n// Copyright © 2017-2020 P. Douglas Reeder; Licensed under the GNU GPL-3.0\n//\n\nimport './shim/requestIdleCallback'\nimport {goFullscreenLandscape, isDesktop, isMagicWindow, calcPosChange, pokeEnvironmentalSound, barFromHands} from './elfland-utils'\n\nconst GRAVITY = 9.807;   // m/s^2\nconst HUMAN_EYE_ELBOW_DISTANCE = 0.56;   // m\nconst DIFFICULTY_VR = 0.75;\nconst DIFFICULTY_MAGIC_WINDOW = 0.6;\nconst DIFFICULTY_KEYBOARD = 0.5;\nconst POWERUP_BOOST = 16;\n\nAFRAME.registerState({\n    initialState: {\n        armatureEl: null,\n        gliderEl: null,\n        cameraEl: null,\n        leftHandEl: null,\n        rightHandEl: null,\n        controllerConnections: {},\n        isAnyPressedLeft: false,\n        isAnyPressedRight: false,\n        controlBarEl: null,\n        controlNeutralHeight: 0.95,\n        controlMode: 'HEAD',   // or 'HANDS'\n        controlSubmode: 'NONE',\n        time: 0,\n        difficulty: DIFFICULTY_MAGIC_WINDOW,\n        gliderPosition: {x:-30, y:15, z:30},\n        gliderPositionStart: {x:-30, y:15, z:30},\n        gliderRotationX: 0,\n        gliderRotationY: -45,\n        gliderRotationZ: 0,\n        gliderRotationYStart: -45,\n        isFlying: false,\n        gliderSpeed: 5,\n        numYellowStars: Math.POSITIVE_INFINITY,\n        stars: 0,\n        questComplete: false,\n        inventory: {},   // keyed by object ID\n        hudVisible: true,\n        hudText: \"\",\n        controlsReminderDisplayed: false,\n        debug: false   // no way to enable this yet\n    },\n\n    handlers: {\n        setState: function (state, values) {\n            for (let pName in values) {\n                if (pName !== 'target') {\n                    console.log(\"setting\", pName, values[pName]);\n                    state[pName] = values[pName];\n                }\n            }\n        },\n\n        setArmatureEl: function (state, armatureEl) {\n            this.powerup = new Howl({src: ['../assets/411460__inspectorj__power-up-bright-a.mp3']});\n\n            console.log(\"hasNativeWebXRImplementation:\", window.hasNativeWebXRImplementation);\n            console.log(\"hasNativeWebVRImplementation:\", window.hasNativeWebVRImplementation);\n            console.log(\"isMobile:\", AFRAME.utils.device.isMobile());\n            console.log(\"isMobileVR:\", AFRAME.utils.device.isMobileVR());\n\n            state.armatureEl = armatureEl;\n            state.gliderEl = armatureEl.querySelector('#glider');\n            state.cameraEl = armatureEl.querySelector('[camera]');\n\n            let dustEl = AFRAME.scenes[0].querySelector('a-dust');\n            if (dustEl) {\n                requestIdleCallback(() => {   // delays setup until there's some slack time\n                    dustEl.components.dust.setCamera(state.armatureEl);\n                });\n            }\n\n            let bodyEl = state.armatureEl.querySelector('#body');\n            let wingEl = state.gliderEl.querySelector('#wing');\n            let hudEl = armatureEl.querySelector('#hud');\n            this.adjustForMagicWindow(wingEl);\n            if (AFRAME.scenes[0].is(\"vr-mode\") && AFRAME.utils.device.checkHeadsetConnected()) {\n                this.adjustHudForVR(hudEl);\n                state.difficulty = DIFFICULTY_VR;\n            } else {\n                this.adjustHudForFlat(hudEl);\n                if (isMagicWindow()) {\n                    state.difficulty = DIFFICULTY_MAGIC_WINDOW;\n                } else {\n                    state.difficulty = DIFFICULTY_KEYBOARD;\n                }\n            }\n            AFRAME.scenes[0].addEventListener('enter-vr', (event) => {\n                if (AFRAME.utils.device.checkHeadsetConnected()) {\n                    bodyEl.object3D.position.y = -1.6;\n                    this.adjustHudForVR(hudEl);\n                    this.adjustForMagicWindow(wingEl);\n                    state.difficulty = DIFFICULTY_VR;\n                }\n                pokeEnvironmentalSound();\n            });\n            AFRAME.scenes[0].addEventListener('exit-vr', (event) => {\n                // bodyEl.object3D.position.y = 0;   // Why is this unnecessary?\n                this.adjustHudForFlat(hudEl);\n                this.adjustForMagicWindow(wingEl);\n                if (isMagicWindow()) {\n                    state.difficulty = DIFFICULTY_MAGIC_WINDOW;\n                } else {\n                    state.difficulty = DIFFICULTY_KEYBOARD;\n                }\n            });\n\n            if (isDesktop() && !AFRAME.utils.device.checkHeadsetConnected()) {\n                console.log(\"desktop w/o headset; disabling look-controls so keyboard controls can function\");\n                state.cameraEl.setAttribute('look-controls', 'enabled', 'false');\n            }\n\n            state.gliderEl.addEventListener('raycaster-intersection', (evt) => {\n                // Intersection w/ distance 0 is sometimes sent immediately\n                if (evt.detail.intersections.length > 0 && evt.detail.intersections[0].distance > 0) {\n                    console.log(\"CRASH!\", evt.detail.els[0].tagName,\n                        evt.detail.intersections[0].distance,\n                        state.gliderEl.getAttribute('raycaster').far, state.gliderSpeed/4);\n                    AFRAME.scenes[0].emit('hover', {});\n                    let crash = new Howl({src: ['../assets/198876__bone666138__crash.mp3']});\n                    crash.play();\n\n                    setTimeout(() => {\n                        if (state.gliderSpeed >= 30) {\n                            sessionStorage.setItem('returnWorld', location.pathname);\n                            location.pathname = '/ginnungagap/'\n                        } else {\n                            // console.log(\"setting start position\", state.gliderPositionStart);\n                            state.gliderPosition.x = state.gliderPositionStart.x;\n                            state.gliderPosition.y = state.gliderPositionStart.y;\n                            state.gliderPosition.z = state.gliderPositionStart.z;\n                            state.gliderRotationX = 0;\n                            state.gliderRotationY = state.gliderRotationYStart;\n                            state.gliderSpeed = 5;\n                            state.hudText = \"\";\n                            state.cameraEl.object3D.rotation.x = 0;   // only takes effect when look-controls disabled\n                            state.cameraEl.object3D.rotation.y = 0;\n                            state.cameraEl.object3D.rotation.z = 0;\n                            setTimeout(this.showControlsReminder.bind(this, state), 3000);\n                        }\n                    }, 2000)\n                }\n            });\n\n            armatureEl.addEventListener('hitstart', (evt) => {\n                // console.log('hitstart armature:', evt.detail.intersectedEls);\n                evt.detail.intersectedEls.forEach( (el) => {\n                    if (el.classList.contains('powerup')) {\n                        console.log(\"powerup\");\n                        state.gliderSpeed += POWERUP_BOOST;\n                        this.powerup.play();\n                    } else if (el.classList.contains('star')) {\n                       ++state.stars;\n                       console.log(\"collected star\", state.stars, \"of\", state.numYellowStars);\n                        el.parentNode.removeChild(el);\n                       this.ding.play();\n                    } else if (el.classList.contains('proximitySound')) {\n                        let url = el.getAttribute('data-sound-url');\n                        let volume = el.getAttribute('data-sound-volume') || 1.0;\n                        if (url) {\n                            new Howl({src: url, volume: volume, autoplay: true});\n                        }\n                        let text = el.getAttribute('data-text');\n                        let subtitle = AFRAME.scenes[0].querySelector('#subtitle');\n                        if (text && subtitle) {\n                            subtitle.setAttribute('value', text);\n                            setTimeout(() => {\n                                subtitle.setAttribute('value', \"\");\n                            }, 5000);\n                        }\n                   } else if (el.components.link) {\n                       console.log(\"hit link\");\n                       if (location.pathname !== '/ginnungagap/') {\n                           sessionStorage.setItem('previousWorld', location.pathname);\n                       }\n                   }\n                });\n            });\n\n            // state doesn't have an init, so we'll register this here.\n            // desktop controls\n            document.addEventListener('keydown', function(evt) {\n                // console.log('keydown:', evt.code);\n                var cameraRotation = state.cameraEl.getAttribute('rotation');\n                switch (evt.code) {\n                    case 'KeyA':\n                    case 'ArrowLeft':\n                        state.cameraEl.object3D.rotation.z += 0.07;\n                        break;\n                    case 'KeyD':\n                    case 'ArrowRight':\n                        state.cameraEl.object3D.rotation.z -= 0.07;\n                        break;\n                    case 'KeyW':\n                    case 'ArrowUp':\n                        state.cameraEl.object3D.rotation.x += 0.045;\n                        break;\n                    case 'KeyS':\n                    case 'ArrowDown':\n                        state.cameraEl.object3D.rotation.x -= 0.045;\n                        break;\n                    case 'Space':\n                        if (!state.isFlying) {\n                            AFRAME.scenes[0].emit('launch', evt);\n                        } else {\n                            if (state.debug) {\n                                AFRAME.scenes[0].emit('hover', evt);\n                            }\n                        }\n                        break;\n                    case 'Enter':\n                        state.hudVisible = ! state.hudVisible;\n                        break;\n                }\n            }, false);\n\n            // two-controller steering\n\n            state.leftHandEl = document.getElementById(\"leftHand\");\n            state.rightHandEl = document.getElementById(\"rightHand\");\n            if (isDesktop()) {\n                state.leftHandEl.setAttribute('hand-controls', 'handModelStyle', 'highPoly');\n                state.rightHandEl.setAttribute('hand-controls', 'handModelStyle', 'highPoly');\n            }\n\n            this.leftDownHandler = this.handHandler.bind(this, 'LEFT', 'DOWN', state);\n            this.leftUpHandler = this.handHandler.bind(this, 'LEFT', 'UP', state);\n            this.rightDownHandler = this.handHandler.bind(this, 'RIGHT', 'DOWN', state);\n            this.rightUpHandler = this.handHandler.bind(this, 'RIGHT', 'UP', state);\n\n            state.controlBarEl = document.getElementById('controlBar');\n        },\n\n        controllerconnected: function (state, evt) {   // evt is name and component; this is state obj\n            state.controllerConnections[evt.component.el.id] = true;\n            this.adjustControlMode(state);\n        },\n        controllerdisconnected: function (state, evt) {\n            state.controllerConnections[evt.component.el.id] = false;\n            this.adjustControlMode(state);\n        },\n        adjustControlMode: function (state) {\n            const oldControlMode =  state.controlMode;\n            if (state.controllerConnections.leftHand || state.controllerConnections.rightHand) {\n                state.controlMode = 'HANDS';\n            } else {\n                state.controlMode = 'HEAD';\n            }\n            if (state.controlMode !== oldControlMode) {\n                console.log(\"changed control mode from\", oldControlMode, \"to\", state.controlMode);\n                if (state.controlMode === 'HANDS') {\n                    state.leftHandEl.addEventListener('buttondown', this.leftDownHandler);\n                    state.leftHandEl.addEventListener('buttonup', this.leftUpHandler);\n                    state.rightHandEl.addEventListener('buttondown', this.rightDownHandler);\n                    state.rightHandEl.addEventListener('buttonup', this.rightUpHandler);\n\n                    const cameraPos = state.cameraEl.getAttribute(\"position\");\n                    state.controlNeutralHeight = cameraPos.y - HUMAN_EYE_ELBOW_DISTANCE;\n                    state.controlBarEl.object3D.visible = true;\n                } else if (state.controlMode === 'HEAD') {\n                    state.leftHandEl.removeEventListener('buttondown', this.leftDownHandler);\n                    state.leftHandEl.removeEventListener('buttonup', this.leftUpHandler);\n                    state.rightHandEl.removeEventListener('buttondown', this.rightDownHandler);\n                    state.rightHandEl.removeEventListener('buttonup', this.rightUpHandler);\n\n                    state.controlBarEl.object3D.visible = false;\n                }\n            }\n        },\n        handHandler: function handHandler(handedness, upDown, state, evt) {\n            const gamepadLeft = state.leftHandEl.components['tracked-controls'].controller.gamepad;\n            if (gamepadLeft && gamepadLeft.buttons) {\n                state.isAnyPressedLeft = false;\n                const buttonsLeft = gamepadLeft.buttons;\n                for (let i = 0; i < buttonsLeft.length; ++i) {   // not a JavaScript array\n                    if (buttonsLeft[i].pressed) {\n                        state.isAnyPressedLeft = true;\n                    }\n                }\n            } else if ('LEFT' === handedness) {\n                state.isAnyPressedLeft = 'DOWN' === upDown;   // hack\n            }\n\n            const gamepadRight = state.rightHandEl.components['tracked-controls'].controller.gamepad;\n            if (gamepadRight && gamepadRight.buttons) {\n                state.isAnyPressedRight = false;\n                const buttonsRight = gamepadRight.buttons;\n                for (let i = 0; i < buttonsRight.length; ++i) {   // not a JavaScript array\n                    if (buttonsRight[i].pressed) {\n                        state.isAnyPressedRight = true;\n                    }\n                }\n            } else if ('RIGHT' === handedness) {\n                state.isAnyPressedRight = 'DOWN' === upDown;   // hack\n            }\n\n            if (state.isAnyPressedLeft && state.isAnyPressedRight) {\n                if ('BOTH' !== state.controlSubmode) {\n                    const leftHandPos = state.leftHandEl.getAttribute(\"position\");\n                    const rightHandPos = state.rightHandEl.getAttribute(\"position\");\n                    state.controlNeutralHeight = (leftHandPos.y + rightHandPos.y) / 2;\n                }\n                state.controlSubmode = 'BOTH';\n            } else if (state.isAnyPressedLeft) {\n                if ('LEFT' !== state.controlSubmode) {\n                    const leftHandPos = state.leftHandEl.getAttribute(\"position\");\n                    state.controlNeutralHeight = leftHandPos.y;\n                }\n                state.controlSubmode = 'LEFT';\n            } else if (state.isAnyPressedRight) {\n                if ('RIGHT' !== state.controlSubmode) {\n                    const rightHandPos = state.rightHandEl.getAttribute(\"position\");\n                    state.controlNeutralHeight = rightHandPos.y;\n                }\n                state.controlSubmode = 'RIGHT';\n            } else {\n                state.controlSubmode = 'NONE';\n            }\n            state.controlNeutralHeight = Math.min(Math.max(state.controlNeutralHeight, 0.25), 1.90);\n        },\n\n\n        // aframe-button-controls: any controller button, or scene touch\n        buttondown: function (state, action) {\n            // console.log(\"buttondown\", action);\n            if (!state.isFlying) {\n                AFRAME.scenes[0].emit('launch', action);\n            } else {\n                if (state.debug) {\n                    AFRAME.scenes[0].emit('hover', action);\n                }\n            }\n        },\n\n        countYellowStars: function (state, action) {\n            state.numYellowStars = AFRAME.scenes[0].querySelectorAll('.star').length;\n            console.log(\"numYellowStars:\", state.numYellowStars);\n            if (state.numYellowStars) {\n                this.ding = new Howl({src: ['../assets/393633__daronoxus__ding.mp3']});\n            }\n        },\n\n        launch: function (state, action) {\n            console.log(\"launch\", action);\n\n            state.isFlying = true;\n\n            state.controlsReminderDisplayed = false;\n            let prelaunchHelp = AFRAME.scenes[0].querySelector('#prelaunchHelp');\n            if (prelaunchHelp) {\n                prelaunchHelp.setAttribute('value', \"\");\n            }\n            goFullscreenLandscape();\n\n            let postlaunchHelp = AFRAME.scenes[0].querySelector('#postlaunchHelp');\n            if (postlaunchHelp && postlaunchHelp.src) {\n                let postlaunchHelpAudio = new Howl({src: [postlaunchHelp.src]});\n                setTimeout(() => {\n                    postlaunchHelpAudio.play();\n                }, 60000);\n            }\n        },\n        hover: function (state, action) {\n            console.log(\"hover\", action);\n\n            state.isFlying = false;\n        },\n\n        loaded: function (state, action) {\n            // console.log(\"loaded\", state, action);\n            let intro = document.getElementById('intro');\n            if (!intro) {\n                this.startInteraction(state);\n            }\n        },\n\n        'enter-vr': function (state) {\n            // console.log(\"enter-vr\");\n            this.startInteraction(state);\n        },\n        'exit-vr': function (state, action) {\n            // console.log(\"exit-vr\", action);\n            if (state.controlsReminderDisplayed) {\n                this.showControlsReminder(state);   // updates list of controls for flat screen\n            }\n\n            let intro = document.getElementById('intro');\n            if (intro) {\n                AFRAME.scenes[0].emit('hover', action);\n            }\n        },\n        startInteraction: function (state) {\n            if (state.controlsReminderDisplayed) {\n                this.showControlsReminder(state);   // updates list of controls\n            } else {\n                setTimeout(this.showControlsReminder.bind(this, state), 10000);\n            }\n        },\n        showControlsReminder: function (state) {\n            let prelaunchHelp = AFRAME.scenes[0].querySelector('#prelaunchHelp');\n            let intro = document.getElementById('intro');\n            if (prelaunchHelp && (!intro || AFRAME.scenes[0].is(\"vr-mode\")) && !state.isFlying) {\n                state.controlsReminderDisplayed = true;\n                if (AFRAME.scenes[0].is(\"vr-mode\") && AFRAME.utils.device.checkHeadsetConnected() || AFRAME.utils.device.isMobileVR()) {\n                    prelaunchHelp.setAttribute('value', \"The wing above you\\npoints where you're flying.\\n\\nTilt left: turn left\\nTilt right: turn right\\nUp: climb & slow down\\nDown: dive & speed up\\nTrigger, button or touchpad: launch\");\n                } else if (AFRAME.utils.device.isMobile()) {\n                    prelaunchHelp.setAttribute('value', \"The wing above you\\npoints where you're flying.\\n\\nRoll your device left: turn left\\nRoll your device right: turn right\\nTilt up: climb & slow down\\nTilt down: dive & speed up\\nTap screen: launch\");\n                } else {\n                    prelaunchHelp.setAttribute('value', \"The wing above you\\npoints where you're flying.\\n\\nA: turn left\\nD: turn right\\nW: climb (& slow down)\\nS: dive (& speed up)\\nSpace bar: launch\");\n                }\n            }\n        },\n\n        iterate: function (state, action) {\n            // A pause in the action is better than flying blind\n            action.timeDelta = Math.min(action.timeDelta, 100);\n            state.time += action.timeDelta * state.difficulty;\n            let xSetting, zSetting;\n            switch (state.controlMode) {\n                case \"HEAD\":\n                    let cameraRotation = state.cameraEl.getAttribute('rotation');\n                    if (!cameraRotation) {\n                        console.warn(\"camera rotation not available\");\n                        return;\n                    }\n\n                    let cameraRotX = isMagicWindow() ? cameraRotation.x + 20 : cameraRotation.x;\n                    xSetting = cameraRotX;\n                    zSetting = cameraRotation.z;\n                    break;\n                case \"HANDS\":\n                    const leftHandPos = state.leftHandEl.getAttribute(\"position\");\n                    const rightHandPos = state.rightHandEl.getAttribute(\"position\");\n                    switch (state.controlSubmode) {\n                        case \"BOTH\":\n                            let {position, rotation} = barFromHands(leftHandPos, rightHandPos);\n\n                            state.controlBarEl.setAttribute('position', position);\n                            state.controlBarEl.setAttribute('rotation', {x:rotation.x, y:rotation.y, z:rotation.z+90});\n\n                            xSetting = (position.y - state.controlNeutralHeight) * 150;\n                            zSetting = rotation.z;\n                            break;\n                        case \"LEFT\":\n                            const leftHandRot = state.leftHandEl.getAttribute('rotation');\n\n                            state.controlBarEl.setAttribute('position', leftHandPos);\n                            state.controlBarEl.setAttribute('rotation', leftHandRot);\n\n                            xSetting = (leftHandPos.y - state.controlNeutralHeight) * 150;\n                            zSetting = leftHandRot.z + 90;\n                            break;\n                        case \"RIGHT\":\n                            const rightHandRot = state.rightHandEl.getAttribute('rotation');\n\n                            state.controlBarEl.setAttribute('position', rightHandPos);\n                            state.controlBarEl.setAttribute('rotation', rightHandRot);\n\n                            xSetting = (rightHandPos.y - state.controlNeutralHeight) * 150;\n                            zSetting = rightHandRot.z - 90;\n                            break;\n                        case \"NONE\":\n                            state.controlBarEl.setAttribute('position', {x: 0, y: state.controlNeutralHeight, z: -0.4});\n                            state.controlBarEl.setAttribute('rotation', {x: 0, y: 0, z: 90});\n\n                            xSetting = 0;\n                            zSetting = 0;\n                            break;\n                    }\n                    break;\n            }\n            let xDiff = xSetting - state.gliderRotationX;\n            let xChange = (xDiff + Math.sign(xDiff)*15) * (action.timeDelta / 1000);\n            if (Math.abs(xChange) > Math.abs(xDiff)) {\n                xChange = xDiff;\n            }\n            let newXrot = state.gliderRotationX + xChange;\n            newXrot = Math.max(newXrot, -75);\n            newXrot = Math.min(newXrot, 75);\n            state.gliderRotationX = newXrot;\n\n            let zDiff = zSetting - state.gliderRotationZ;\n            let zChange = (zDiff + Math.sign(zDiff)*15) * (action.timeDelta / 1000);\n            if (Math.abs(zChange) > Math.abs(zDiff)) {\n                zChange = zDiff;\n            }\n            let newZrot = state.gliderRotationZ + zChange;\n            newZrot = Math.max(newZrot, -70);\n            newZrot = Math.min(newZrot, 70);\n            state.gliderRotationZ = newZrot;\n\n            let deltaHeading = state.gliderRotationZ * action.timeDelta / 1000;\n            state.gliderRotationY = (state.gliderRotationY + deltaHeading + 180) % 360 - 180;\n\n            if (state.isFlying) {\n                let distance = state.gliderSpeed * action.timeDelta / 1000;\n\n                let posChange = calcPosChange(state.gliderRotationX, state.gliderRotationY+90, distance);\n                let altitudeChange = posChange.y;\n                state.gliderPosition.x += posChange.x;\n                state.gliderPosition.y += altitudeChange;\n                state.gliderPosition.z += posChange.z;\n\n                let speedChange = (-Math.sign(altitudeChange) * Math.sqrt(2 * GRAVITY * Math.abs(altitudeChange)) -\n                                0.0005 * state.gliderSpeed * state.gliderSpeed)\n                        * action.timeDelta / 1000;\n                state.gliderSpeed = Math.max(state.gliderSpeed + speedChange, 0.1);\n                state.gliderSpeed = Math.min(state.gliderSpeed, 99.4);\n\n                if (state.gliderSpeed < 9.95) {\n                    state.hudText = (state.gliderSpeed).toFixed(1);\n                } else {\n                    state.hudText = (state.gliderSpeed).toFixed(0);\n                }\n\n                state.gliderEl.setAttribute('raycaster', 'far', state.gliderSpeed/4);\n            }\n        },\n\n        placeInGliderPath: function (state, action) {\n            // console.log(\"placeInGliderPath:\", action);\n            let verticalAngleDeg = state.gliderRotationX + (Math.random()-0.5) * action.variation;\n            let horizontalAngleDeg = state.gliderRotationY + 90 + (Math.random()-0.5) * action.variation;\n            let posChange = calcPosChange(verticalAngleDeg, horizontalAngleDeg, action.distance);\n            let newPos = {x: state.gliderPosition.x + posChange.x,\n                y: state.gliderPosition.y + posChange.y,\n                z: state.gliderPosition.z + posChange.z};\n            action.el.setAttribute('position', newPos);\n            action.el.setAttribute('rotation', 'y', state.gliderRotationY);\n        },\n\n        adjustForMagicWindow: function (wingEl) {\n            if (! isMagicWindow()) {\n                wingEl.object3D.rotation.x = 0;\n                wingEl.object3D.scale.set(1, 1, 1);\n            } else {\n                wingEl.object3D.rotation.x = THREE.Math.degToRad(-30.0);\n                wingEl.object3D.scale.set(1, 1, 3);\n            }\n        },\n\n        adjustHudForVR: function (hudEl) {\n            if (AFRAME.utils.device.isMobile()) {\n                hudEl.object3D.position.x = 0.20;\n                hudEl.object3D.position.y = 0.30;\n            } else {\n                hudEl.object3D.position.x = 0.20;\n                hudEl.object3D.position.y = 0.42;\n            }\n            hudEl.object3D.rotation.x = THREE.Math.degToRad(30.0);\n            hudEl.object3D.rotation.y = THREE.Math.degToRad(-20.0);\n        },\n\n        adjustHudForFlat: function (hudEl) {\n            if (isDesktop()) {\n                hudEl.object3D.position.x = 0.85;\n                hudEl.object3D.position.y = 0.5;\n                hudEl.object3D.rotation.x = 0.0;\n                hudEl.object3D.rotation.y = 0.0;\n            } else {\n                hudEl.object3D.position.x = 0.70;\n                hudEl.object3D.position.y = 0.20;\n                hudEl.object3D.rotation.x = THREE.Math.degToRad(30.0);\n                hudEl.object3D.rotation.y = THREE.Math.degToRad(-20.0);\n            }\n        }\n    },\n\n    computeState: function (newState, payload) {\n        try {\n            let oldQuestComplete = newState.questComplete;\n            newState.questComplete = newState.numYellowStars <= 0 || newState.stars / newState.numYellowStars >= 0.95;\n            if (newState.questComplete && ! oldQuestComplete) {\n                let horncall = new Howl({src: ['../assets/361684__taranp__horncall-strauss1-eflatmajor_incipit.mp3']});\n                horncall.play();\n            }\n        } catch (err) {\n            console.error(err);\n        }\n    }\n});\n\nAFRAME.registerComponent('armature-tick-state', {\n    init: function () {\n        AFRAME.scenes[0].emit('setArmatureEl', this.el);\n    },\n\n    tick: function (time, timeDelta) {\n        AFRAME.scenes[0].emit('iterate', {time: time, timeDelta: timeDelta});\n    }\n});\n","// ginnungagap.js - the boring result of a high-speed crash in Elfland Glider\n// Copyright © 2019 P. Douglas Reeder; Licensed under the GNU GPL-3.0\n\nimport {isDesktop, setEnvironmentalSound} from '../src/elfland-utils'\n\nimport '../src/state.js'\n\nAFRAME.registerComponent('ginnungagap', {\n    init: function () {\n        let sceneEl = this.el;\n\n        setEnvironmentalSound('100495__jakobthiesen__light-rain-in-forest.ogg', 1.0);\n        // rain visual is too resource-intensive for mobile\n        if (isDesktop()) {\n            let rain = document.createElement('a-entity');\n            rain.setAttribute('particle-system', {preset: 'rain', particleCount: 500});\n            rain.setAttribute('bind__position', 'gliderPosition');\n            sceneEl.appendChild(rain);\n        }\n\n        this.clouds = [];\n        let clouds = this.clouds;\n        setTimeout(() => {\n            for (let i=0; i<=80; ++i) {\n                placeCloud(875-i*10, 270);\n            }\n        }, 4);\n        setInterval(placeCloud, 5000);\n        function placeCloud(distance=500, variation=80) {\n            if (clouds.length >= 100) {\n                sceneEl.components.pool__clouds.returnEntity(clouds.shift());\n            }\n\n            let cloudEl = sceneEl.components.pool__clouds.requestEntity(true);\n            let opacity=0;\n            cloudEl.setAttribute('material', 'opacity', opacity);\n            let intervalID = setInterval( () => {\n                opacity += 0.1 / 120;\n                cloudEl.setAttribute('material', 'opacity', opacity);\n                if (opacity >= 0.5) {\n                    clearInterval(intervalID);\n                }\n            }, 16);\n            AFRAME.scenes[0].emit('placeInGliderPath', {el: cloudEl, distance: distance, variation:variation});\n            // cloudEl.object3D.rotation.z = Math.floor(Math.random()*2) * Math.PI + (Math.random()-0.5) * 0.75;\n            cloudEl.object3D.rotation.z = Math.random()*2*Math.PI;\n            clouds.push(cloudEl);\n        }\n\n        this.armaturePosition = document.getElementById('armature').object3D.position;\n\n\n        var returnPath = sessionStorage.getItem('returnWorld');\n        if (returnPath) {\n            var returnPortal = document.getElementById('returnPortal');\n            returnPortal.setAttribute('link','href', returnPath);\n            returnPortal.setAttribute('link','image', returnPath + 'screenshot.png');\n        }\n\n        setInterval( () => {\n            let returnPortalEl = document.getElementById('returnPortal');\n            returnPortalEl.setAttribute('visible', 'true');\n            AFRAME.scenes[0].emit('placeInGliderPath', {el: returnPortalEl, distance: 100, variation:45});\n        }, 60000);\n    },\n\n    play: function () {\n        this.el.emit('launch', \"ginnungagap play\");\n    },\n\n    tick: function () {\n        this.clouds.forEach(cloud => {\n            if (this.armaturePosition.distanceTo(cloud.object3D.position) > 100) {\n                let rotationZ = cloud.object3D.rotation.z;\n                cloud.object3D.lookAt(this.armaturePosition);\n                cloud.object3D.rotation.z = rotationZ;\n            }\n        });\n    }\n});\n","/*!\n * Copyright 2015 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\n \n/*\n * @see https://developers.google.com/web/updates/2015/08/using-requestidlecallback\n */\nwindow.requestIdleCallback = window.requestIdleCallback ||\n  function (cb) {\n    return setTimeout(function () {\n      var start = Date.now();\n      cb({ \n        didTimeout: false,\n        timeRemaining: function () {\n          return Math.max(0, 50 - (Date.now() - start));\n        }\n      });\n    }, 1);\n  }\n\nwindow.cancelIdleCallback = window.cancelIdleCallback ||\n  function (id) {\n    clearTimeout(id);\n  } "],"sourceRoot":""}