{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/elfland-utils.js","webpack:///./src/state.js","webpack:///./ginnungagap/ginnungagap.js","webpack:///./src/shim/requestIdleCallback.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","goFullscreenLandscape","isMagicWindow","promise","canvasEl","document","querySelector","requestFullscreen","webkitRequestFullscreen","mozRequestFullScreen","msRequestFullscreen","apply","then","Promise","resolve","lockLandscapeOrientation","screen","orientation","lock","response","console","log","catch","err","warn","isDesktop","AFRAME","utils","device","isMobile","isMobileVR","scenes","is","calcPosChange","verticalAngleDeg","horizontalAngleDeg","distance","verticalAngleRad","Math","PI","altitudeChange","sin","horizontalDistance","cos","horizontalAngleRad","x","y","z","__webpack_exports__","setEnvironmentalSound","environmentalSound","url","volume","Howl","src","autoplay","loop","html5","onplayerror","once","play","addEventListener","hidden","pause","_elfland_utils__WEBPACK_IMPORTED_MODULE_1__","registerState","initialState","armatureEl","gliderEl","cameraEl","time","difficulty","gliderPosition","gliderPositionStart","gliderRotationX","gliderRotationY","gliderRotationZ","gliderRotationYStart","isFlying","gliderSpeed","numYellowStars","POSITIVE_INFINITY","stars","questComplete","inventory","hudVisible","hudText","controlsReminderDisplayed","debug","handlers","setState","state","values","pName","setArmatureEl","this","powerup","window","hasNativeWebVRImplementation","dustEl","requestIdleCallback","components","dust","setCamera","bodyEl","wingEl","hudEl","adjustForMagicWindow","checkHeadsetConnected","adjustHudForVR","adjustHudForFlat","event","object3D","position","setAttribute","evt","detail","intersections","length","els","tagName","getAttribute","far","emit","setTimeout","sessionStorage","setItem","location","pathname","rotation","showControlsReminder","intersectedEls","forEach","el","classList","contains","parentNode","removeChild","ding","text","subtitle","link","code","buttondown","action","countYellowStars","querySelectorAll","launch","prelaunchHelp","hover","loaded","getElementById","startInteraction","enter-vr","exit-vr","intro","iterate","timeDelta","min","cameraRotation","xDiff","xChange","sign","abs","newXrot","max","zDiff","zChange","newZrot","deltaHeading","posChange","speedChange","sqrt","toFixed","placeInGliderPath","random","variation","newPos","THREE","degToRad","scale","set","computeState","newState","payload","oldQuestComplete","error","registerComponent","init","tick","_src_elfland_utils__WEBPACK_IMPORTED_MODULE_0__","sceneEl","rain","createElement","preset","particleCount","appendChild","clouds","placeCloud","pool__clouds","returnEntity","shift","cloudEl","requestEntity","opacity","intervalID","setInterval","clearInterval","push","armaturePosition","returnPath","getItem","returnPortal","returnPortalEl","cloud","distanceTo","rotationZ","lookAt","cb","start","Date","now","didTimeout","timeRemaining","cancelIdleCallback","id","clearTimeout"],"mappings":"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","file":"ginnungagap.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 19);\n","// elfland-utils.js - common functions for Elfland Glider\n// Copyright © 2018-2019 P. Douglas Reeder; Licensed under the GNU GPL-3.0\n\n\nfunction goFullscreenLandscape() {\n    // desktop is fine without fullscreen (which can be enabled via headset button, anyway)\n    if (!isMagicWindow()) {return;}\n\n    let canvasEl = document.querySelector('canvas.a-canvas');\n    let requestFullscreen =\n        canvasEl.requestFullscreen ||\n        canvasEl.webkitRequestFullscreen ||\n        canvasEl.mozRequestFullScreen ||  // The capitalized `S` is not a typo.\n        canvasEl.msRequestFullscreen;\n    let promise;\n    if (requestFullscreen) {\n        promise = requestFullscreen.apply(canvasEl);\n    }\n    if (!(promise && promise.then)) {\n        promise = Promise.resolve();\n    }\n    promise.then(lockLandscapeOrientation, lockLandscapeOrientation);\n}\n\nfunction lockLandscapeOrientation() {\n    if (screen.orientation && screen.orientation.lock) {\n        screen.orientation.lock(\"landscape\").then(response => {\n            console.log(\"screen orientation locked:\", response);\n        }).catch(err => {\n            console.warn(\"screen orientation didn't lock:\", err);\n        });\n    }\n}\n\n\nfunction isDesktop() {\n    return ! (AFRAME.utils.device.isMobile() || AFRAME.utils.device.isMobileVR());\n}\n\nfunction isMagicWindow() {\n    return AFRAME.utils.device.isMobile() && ! AFRAME.scenes[0].is(\"vr-mode\");\n}\n\n\nfunction calcPosChange(verticalAngleDeg, horizontalAngleDeg, distance) {\n    let verticalAngleRad = verticalAngleDeg/180*Math.PI;\n    let altitudeChange = distance * Math.sin(verticalAngleRad);\n\n    let horizontalDistance = distance * Math.cos(verticalAngleRad);\n    let horizontalAngleRad = horizontalAngleDeg/180*Math.PI;\n    return {x: horizontalDistance * Math.cos(horizontalAngleRad),\n        y: altitudeChange,\n        z: -horizontalDistance * Math.sin(horizontalAngleRad)};\n}\n\n\nvar environmentalSound = null;\n\n/**\n * Sets the background sound for a world. It is paused when the tab is hidden.\n * @param url string or Array of strings\n * @param volume number between 0.0 and 1.0\n */\nfunction setEnvironmentalSound(url, volume) {\n    environmentalSound = new Howl({\n        src: url,\n        autoplay: true,\n        loop: true,\n        volume: volume || 1.0,\n        html5: false,\n        onplayerror: function() {\n            environmentalSound.once('unlock', function() {\n                environmentalSound.play();\n            });\n        }\n    });\n\n}\n\ndocument.addEventListener('visibilitychange', () => {\n    if (environmentalSound) {\n        if (document.hidden) {\n            environmentalSound.pause();\n        } else {\n            environmentalSound.play();\n        }\n    }\n}, false);\n\n\nexport {goFullscreenLandscape, isDesktop, isMagicWindow, calcPosChange, setEnvironmentalSound};\n","// state.js - state model for Elfland Glider\n// Copyright © 2017-2019 P. Douglas Reeder; Licensed under the GNU GPL-3.0\n//\n\nimport './shim/requestIdleCallback'\nimport {goFullscreenLandscape, isDesktop, isMagicWindow, calcPosChange} from './elfland-utils'\n\nconst GRAVITY = 9.807;   // m/s^2\nconst DIFFICULTY_VR = 0.75;\nconst DIFFICULTY_MAGIC_WINDOW = 0.6;\nconst DIFFICULTY_KEYBOARD = 0.5;\nconst POWERUP_BOOST = 16;\n\nAFRAME.registerState({\n    initialState: {\n        armatureEl: null,\n        gliderEl: null,\n        cameraEl: null,\n        time: 0,\n        difficulty: DIFFICULTY_MAGIC_WINDOW,\n        gliderPosition: {x:-30, y:15, z:30},\n        gliderPositionStart: {x:-30, y:15, z:30},\n        gliderRotationX: 0,\n        gliderRotationY: -45,\n        gliderRotationZ: 0,\n        gliderRotationYStart: -45,\n        isFlying: false,\n        gliderSpeed: 5,\n        numYellowStars: Math.POSITIVE_INFINITY,\n        stars: 0,\n        questComplete: false,\n        inventory: {},   // keyed by object ID\n        hudVisible: true,\n        hudText: \"\",\n        controlsReminderDisplayed: false,\n        debug: false   // no way to enable this yet\n    },\n\n    handlers: {\n        setState: function (state, values) {\n            for (let pName in values) {\n                if (pName !== 'target') {\n                    console.log(\"setting\", pName, values[pName]);\n                    state[pName] = values[pName];\n                }\n            }\n        },\n\n        setArmatureEl: function (state, armatureEl) {\n            this.powerup = new Howl({src: ['../assets/411460__inspectorj__power-up-bright-a.mp3']});\n\n            console.log(\"hasNativeWebVRImplementation:\", window.hasNativeWebVRImplementation);\n            console.log(\"isMobile:\", AFRAME.utils.device.isMobile());\n            console.log(\"isMobileVR:\", AFRAME.utils.device.isMobileVR());\n\n            state.armatureEl = armatureEl;\n            state.gliderEl = armatureEl.querySelector('#glider');\n            state.cameraEl = armatureEl.querySelector('[camera]');\n\n            let dustEl = AFRAME.scenes[0].querySelector('a-dust');\n            if (dustEl) {\n                requestIdleCallback(() => {   // delays setup until there's some slack time\n                    dustEl.components.dust.setCamera(state.armatureEl);\n                });\n            }\n\n            let bodyEl = state.armatureEl.querySelector('#body');\n            let wingEl = state.gliderEl.querySelector('#wing');\n            let hudEl = armatureEl.querySelector('#hud');\n            this.adjustForMagicWindow(wingEl);\n            if (AFRAME.scenes[0].is(\"vr-mode\") && AFRAME.utils.device.checkHeadsetConnected()) {\n                this.adjustHudForVR(hudEl);\n                state.difficulty = DIFFICULTY_VR;\n            } else {\n                this.adjustHudForFlat(hudEl);\n                if (isMagicWindow()) {\n                    state.difficulty = DIFFICULTY_MAGIC_WINDOW;\n                } else {\n                    state.difficulty = DIFFICULTY_KEYBOARD;\n                }\n            }\n            AFRAME.scenes[0].addEventListener('enter-vr', (event) => {\n                if (AFRAME.utils.device.checkHeadsetConnected()) {\n                    bodyEl.object3D.position.y = -1.6;\n                    this.adjustHudForVR(hudEl);\n                    this.adjustForMagicWindow(wingEl);\n                    state.difficulty = DIFFICULTY_VR;\n                }\n            });\n            AFRAME.scenes[0].addEventListener('exit-vr', (event) => {\n                // bodyEl.object3D.position.y = 0;   // Why is this unnecessary?\n                this.adjustHudForFlat(hudEl);\n                this.adjustForMagicWindow(wingEl);\n                if (isMagicWindow()) {\n                    state.difficulty = DIFFICULTY_MAGIC_WINDOW;\n                } else {\n                    state.difficulty = DIFFICULTY_KEYBOARD;\n                }\n            });\n\n            if (isDesktop() && !AFRAME.utils.device.checkHeadsetConnected()) {\n                console.log(\"desktop w/o headset; disabling look-controls-z so keyboard controls can function\");\n                state.cameraEl.setAttribute('look-controls-z', 'enabled', 'false');\n            }\n\n            state.gliderEl.addEventListener('raycaster-intersection', (evt) => {\n                // Intersection w/ distance 0 is sometimes sent immediately\n                if (evt.detail.intersections.length > 0 && evt.detail.intersections[0].distance > 0) {\n                    console.log(\"CRASH!\", evt.detail.els[0].tagName,\n                        evt.detail.intersections[0].distance,\n                        state.gliderEl.getAttribute('raycaster').far, state.gliderSpeed/4);\n                    AFRAME.scenes[0].emit('hover', {});\n                    let crash = new Howl({src: ['../assets/198876__bone666138__crash.mp3']});\n                    crash.play();\n\n                    setTimeout(() => {\n                        if (state.gliderSpeed >= 30) {\n                            sessionStorage.setItem('returnWorld', location.pathname);\n                            location.pathname = '/ginnungagap/'\n                        } else {\n                            // console.log(\"setting start position\", state.gliderPositionStart);\n                            state.gliderPosition.x = state.gliderPositionStart.x;\n                            state.gliderPosition.y = state.gliderPositionStart.y;\n                            state.gliderPosition.z = state.gliderPositionStart.z;\n                            state.gliderRotationX = 0;\n                            state.gliderRotationY = state.gliderRotationYStart;\n                            state.gliderSpeed = 5;\n                            state.hudText = \"\";\n                            state.cameraEl.object3D.rotation.x = 0;   // only takes effect when look-controls-z disabled\n                            state.cameraEl.object3D.rotation.y = 0;\n                            state.cameraEl.object3D.rotation.z = 0;\n                            setTimeout(this.showControlsReminder.bind(this, state), 3000);\n                        }\n                    }, 2000)\n                }\n            });\n\n            armatureEl.addEventListener('hitstart', (evt) => {\n                // console.log('hitstart armature:', evt.detail.intersectedEls);\n                evt.detail.intersectedEls.forEach( (el) => {\n                    if (el.classList.contains('powerup')) {\n                        console.log(\"powerup\");\n                        state.gliderSpeed += POWERUP_BOOST;\n                        this.powerup.play();\n                    } else if (el.classList.contains('star')) {\n                       ++state.stars;\n                       console.log(\"collected star\", state.stars, \"of\", state.numYellowStars);\n                        el.parentNode.removeChild(el);\n                       this.ding.play();\n                    } else if (el.classList.contains('proximitySound')) {\n                        let url = el.getAttribute('data-sound-url');\n                        let volume = el.getAttribute('data-sound-volume') || 1.0;\n                        if (url) {\n                            new Howl({src: url, volume: volume, autoplay: true});\n                        }\n                        let text = el.getAttribute('data-text');\n                        let subtitle = AFRAME.scenes[0].querySelector('#subtitle');\n                        if (text && subtitle) {\n                            subtitle.setAttribute('value', text);\n                            setTimeout(() => {\n                                subtitle.setAttribute('value', \"\");\n                            }, 5000);\n                        }\n                   } else if (el.components.link) {\n                       console.log(\"hit link\");\n                       if (location.pathname !== '/ginnungagap/') {\n                           sessionStorage.setItem('previousWorld', location.pathname);\n                       }\n                   }\n                });\n            });\n\n            // state doesn't have an init, so we'll register this here.\n            // desktop controls\n            document.addEventListener('keydown', function(evt) {\n                // console.log('keydown:', evt.code);\n                var cameraRotation = state.cameraEl.getAttribute('rotation');\n                switch (evt.code) {\n                    case 'KeyA':\n                    case 'ArrowLeft':\n                        state.cameraEl.object3D.rotation.z += 0.07;\n                        break;\n                    case 'KeyD':\n                    case 'ArrowRight':\n                        state.cameraEl.object3D.rotation.z -= 0.07;\n                        break;\n                    case 'KeyW':\n                    case 'ArrowUp':\n                        state.cameraEl.object3D.rotation.x += 0.045;\n                        break;\n                    case 'KeyS':\n                    case 'ArrowDown':\n                        state.cameraEl.object3D.rotation.x -= 0.045;\n                        break;\n                    case 'Space':\n                        if (!state.isFlying) {\n                            AFRAME.scenes[0].emit('launch', evt);\n                        } else {\n                            if (state.debug) {\n                                AFRAME.scenes[0].emit('hover', evt);\n                            }\n                        }\n                        break;\n                    case 'Enter':\n                        state.hudVisible = ! state.hudVisible;\n                        break;\n                }\n            }, false);\n        },\n\n        // aframe-button-controls: any controller button, or scene touch\n        buttondown: function (state, action) {\n            // console.log(\"buttondown\", action);\n            if (!state.isFlying) {\n                AFRAME.scenes[0].emit('launch', action);\n            } else {\n                if (state.debug) {\n                    AFRAME.scenes[0].emit('hover', action);\n                }\n            }\n        },\n\n        countYellowStars: function (state, action) {\n            state.numYellowStars = AFRAME.scenes[0].querySelectorAll('.star').length;\n            console.log(\"numYellowStars:\", state.numYellowStars);\n            if (state.numYellowStars) {\n                this.ding = new Howl({src: ['../assets/393633__daronoxus__ding.mp3']});\n            }\n        },\n\n        launch: function (state, action) {\n            console.log(\"launch\", action);\n\n            state.isFlying = true;\n\n            state.controlsReminderDisplayed = false;\n            let prelaunchHelp = AFRAME.scenes[0].querySelector('#prelaunchHelp');\n            if (prelaunchHelp) {\n                prelaunchHelp.setAttribute('value', \"\");\n            }\n            goFullscreenLandscape();\n        },\n        hover: function (state, action) {\n            console.log(\"hover\", action);\n\n            state.isFlying = false;\n        },\n\n        loaded: function (state, action) {\n            // console.log(\"loaded\", state, action);\n            let intro = document.getElementById('intro');\n            if (!intro) {\n                this.startInteraction(state);\n            }\n        },\n\n        'enter-vr': function (state) {\n            // console.log(\"enter-vr\");\n            this.startInteraction(state);\n        },\n        'exit-vr': function (state, action) {\n            // console.log(\"exit-vr\", action);\n            if (state.controlsReminderDisplayed) {\n                this.showControlsReminder(state);   // updates list of controls for flat screen\n            }\n\n            let intro = document.getElementById('intro');\n            if (intro) {\n                AFRAME.scenes[0].emit('hover', action);\n            }\n        },\n        startInteraction: function (state) {\n            if (state.controlsReminderDisplayed) {\n                this.showControlsReminder(state);   // updates list of controls\n            } else {\n                setTimeout(this.showControlsReminder.bind(this, state), 6000);\n            }\n        },\n        showControlsReminder: function (state) {\n            let prelaunchHelp = AFRAME.scenes[0].querySelector('#prelaunchHelp');\n            let intro = document.getElementById('intro');\n            if (prelaunchHelp && (!intro || AFRAME.scenes[0].is(\"vr-mode\")) && !state.isFlying) {\n                state.controlsReminderDisplayed = true;\n                if (AFRAME.scenes[0].is(\"vr-mode\") && AFRAME.utils.device.checkHeadsetConnected() || AFRAME.utils.device.isMobileVR()) {\n                    prelaunchHelp.setAttribute('value', \"The wing above you\\npoints where you're flying.\\n\\nTilt your head left: turn left\\nTilt your head right: turn right\\nTrigger or touchpad: launch\");\n                } else if (AFRAME.utils.device.isMobile()) {\n                    prelaunchHelp.setAttribute('value', \"The wing above you\\npoints where you're flying.\\n\\nRoll your device left: turn left\\nRoll your device right: turn right\\nTap screen: launch\");\n                } else {\n                    prelaunchHelp.setAttribute('value', \"The wing above you\\npoints where you're flying.\\n\\nA: turn left\\nD: turn right\\nW: climb (& slow down)\\nS: descend (& speed up)\\nSpace bar: launch\");\n                }\n            }\n        },\n\n        iterate: function (state, action) {\n            // A pause in the action is better than flying blind\n            action.timeDelta = Math.min(action.timeDelta, 100);\n            state.time += action.timeDelta * state.difficulty;\n            let cameraRotation = state.cameraEl.getAttribute('rotation');\n            if (!cameraRotation) {\n                console.warn(\"camera rotation not available\");\n                return;\n            }\n            let cameraRotX = isMagicWindow() ? cameraRotation.x + 20 : cameraRotation.x;\n            let xDiff = cameraRotX - state.gliderRotationX;\n            let xChange = (xDiff + Math.sign(xDiff)*15) * (action.timeDelta / 1000);\n            if (Math.abs(xChange) > Math.abs(xDiff)) {\n                xChange = xDiff;\n            }\n            let newXrot = state.gliderRotationX + xChange;\n            newXrot = Math.max(newXrot, -89);\n            newXrot = Math.min(newXrot, 89);\n            state.gliderRotationX = newXrot;\n\n            let zDiff = cameraRotation.z - state.gliderRotationZ;\n            let zChange = (zDiff + Math.sign(zDiff)*15) * (action.timeDelta / 1000);\n            if (Math.abs(zChange) > Math.abs(zDiff)) {\n                zChange = zDiff;\n            }\n            let newZrot = state.gliderRotationZ + zChange;\n            newZrot = Math.max(newZrot, -89);\n            newZrot = Math.min(newZrot, 89);\n            state.gliderRotationZ = newZrot;\n\n            let deltaHeading = state.gliderRotationZ * action.timeDelta / 1000;\n            state.gliderRotationY = (state.gliderRotationY + deltaHeading + 180) % 360 - 180;\n\n            if (state.isFlying) {\n                let distance = state.gliderSpeed * action.timeDelta / 1000;\n\n                let posChange = calcPosChange(state.gliderRotationX, state.gliderRotationY+90, distance);\n                let altitudeChange = posChange.y;\n                state.gliderPosition.x += posChange.x;\n                state.gliderPosition.y += altitudeChange;\n                state.gliderPosition.z += posChange.z;\n\n                let speedChange = (-Math.sign(altitudeChange) * Math.sqrt(2 * GRAVITY * Math.abs(altitudeChange)) -\n                                0.0005 * state.gliderSpeed * state.gliderSpeed)\n                        * action.timeDelta / 1000;\n                state.gliderSpeed = Math.max(state.gliderSpeed + speedChange, 0.1);\n                state.gliderSpeed = Math.min(state.gliderSpeed, 99.4);\n\n                if (state.gliderSpeed < 9.95) {\n                    state.hudText = (state.gliderSpeed).toFixed(1);\n                } else {\n                    state.hudText = (state.gliderSpeed).toFixed(0);\n                }\n\n                state.gliderEl.setAttribute('raycaster', 'far', state.gliderSpeed/4);\n            }\n        },\n\n        placeInGliderPath: function (state, action) {\n            // console.log(\"placeInGliderPath:\", action);\n            let verticalAngleDeg = state.gliderRotationX + (Math.random()-0.5) * action.variation;\n            let horizontalAngleDeg = state.gliderRotationY + 90 + (Math.random()-0.5) * action.variation;\n            let posChange = calcPosChange(verticalAngleDeg, horizontalAngleDeg, action.distance);\n            let newPos = {x: state.gliderPosition.x + posChange.x,\n                y: state.gliderPosition.y + posChange.y,\n                z: state.gliderPosition.z + posChange.z};\n            action.el.setAttribute('position', newPos);\n            action.el.setAttribute('rotation', 'y', state.gliderRotationY);\n        },\n\n        adjustForMagicWindow: function (wingEl) {\n            if (! isMagicWindow()) {\n                wingEl.object3D.rotation.x = 0;\n                wingEl.object3D.scale.set(1, 1, 1);\n            } else {\n                wingEl.object3D.rotation.x = THREE.Math.degToRad(-30.0);\n                wingEl.object3D.scale.set(1, 1, 3);\n            }\n        },\n\n        adjustHudForVR: function (hudEl) {\n            if (AFRAME.utils.device.isMobile()) {\n                hudEl.object3D.position.x = 0.20;\n                hudEl.object3D.position.y = 0.30;\n            } else {\n                hudEl.object3D.position.x = 0.20;\n                hudEl.object3D.position.y = 0.42;\n            }\n            hudEl.object3D.rotation.x = THREE.Math.degToRad(30.0);\n            hudEl.object3D.rotation.y = THREE.Math.degToRad(-20.0);\n        },\n\n        adjustHudForFlat: function (hudEl) {\n            if (isDesktop()) {\n                hudEl.object3D.position.x = 0.85;\n                hudEl.object3D.position.y = 0.5;\n                hudEl.object3D.rotation.x = 0.0;\n                hudEl.object3D.rotation.y = 0.0;\n            } else {\n                hudEl.object3D.position.x = 0.70;\n                hudEl.object3D.position.y = 0.20;\n                hudEl.object3D.rotation.x = THREE.Math.degToRad(30.0);\n                hudEl.object3D.rotation.y = THREE.Math.degToRad(-20.0);\n            }\n        }\n    },\n\n    computeState: function (newState, payload) {\n        try {\n            let oldQuestComplete = newState.questComplete;\n            newState.questComplete = newState.stars >= newState.numYellowStars;\n            if (newState.questComplete && ! oldQuestComplete) {\n                let horncall = new Howl({src: ['../assets/361684__taranp__horncall-strauss1-eflatmajor_incipit.mp3']});\n                horncall.play();\n            }\n        } catch (err) {\n            console.error(err);\n        }\n    }\n});\n\nAFRAME.registerComponent('armature-tick-state', {\n    init: function () {\n        AFRAME.scenes[0].emit('setArmatureEl', this.el);\n    },\n\n    tick: function (time, timeDelta) {\n        AFRAME.scenes[0].emit('iterate', {time: time, timeDelta: timeDelta});\n    }\n});\n","// ginnungagap.js - the boring result of a high-speed crash in Elfland Glider\n// Copyright © 2019 P. Douglas Reeder; Licensed under the GNU GPL-3.0\n\nimport {isDesktop, setEnvironmentalSound} from '../src/elfland-utils'\n\nimport '../src/state.js'\n\nAFRAME.registerComponent('ginnungagap', {\n    init: function () {\n        let sceneEl = this.el;\n\n        setEnvironmentalSound('100495__jakobthiesen__light-rain-in-forest.ogg', 1.0);\n        // rain visual is too resource-intensive for mobile\n        if (isDesktop()) {\n            let rain = document.createElement('a-entity');\n            rain.setAttribute('particle-system', {preset: 'rain', particleCount: 500});\n            rain.setAttribute('bind__position', 'gliderPosition');\n            sceneEl.appendChild(rain);\n        }\n\n        this.clouds = [];\n        let clouds = this.clouds;\n        setTimeout(() => {\n            for (let i=0; i<=80; ++i) {\n                placeCloud(875-i*10, 270);\n            }\n        }, 4);\n        setInterval(placeCloud, 5000);\n        function placeCloud(distance=500, variation=80) {\n            if (clouds.length >= 100) {\n                sceneEl.components.pool__clouds.returnEntity(clouds.shift());\n            }\n\n            let cloudEl = sceneEl.components.pool__clouds.requestEntity(true);\n            let opacity=0;\n            cloudEl.setAttribute('material', 'opacity', opacity);\n            let intervalID = setInterval( () => {\n                opacity += 0.1 / 120;\n                cloudEl.setAttribute('material', 'opacity', opacity);\n                if (opacity >= 0.5) {\n                    clearInterval(intervalID);\n                }\n            }, 16);\n            AFRAME.scenes[0].emit('placeInGliderPath', {el: cloudEl, distance: distance, variation:variation});\n            // cloudEl.object3D.rotation.z = Math.floor(Math.random()*2) * Math.PI + (Math.random()-0.5) * 0.75;\n            cloudEl.object3D.rotation.z = Math.random()*2*Math.PI;\n            clouds.push(cloudEl);\n        }\n\n        this.armaturePosition = document.getElementById('armature').object3D.position;\n\n\n        var returnPath = sessionStorage.getItem('returnWorld');\n        if (returnPath) {\n            var returnPortal = document.getElementById('returnPortal');\n            returnPortal.setAttribute('link','href', returnPath);\n            returnPortal.setAttribute('link','image', returnPath + 'screenshot.png');\n        }\n\n        setInterval( () => {\n            let returnPortalEl = document.getElementById('returnPortal');\n            returnPortalEl.setAttribute('visible', 'true');\n            AFRAME.scenes[0].emit('placeInGliderPath', {el: returnPortalEl, distance: 100, variation:45});\n        }, 60000);\n    },\n\n    play: function () {\n        this.el.emit('launch', \"ginnungagap play\");\n    },\n\n    tick: function () {\n        this.clouds.forEach(cloud => {\n            if (this.armaturePosition.distanceTo(cloud.object3D.position) > 100) {\n                let rotationZ = cloud.object3D.rotation.z;\n                cloud.object3D.lookAt(this.armaturePosition);\n                cloud.object3D.rotation.z = rotationZ;\n            }\n        });\n    }\n});\n","/*!\n * Copyright 2015 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\n \n/*\n * @see https://developers.google.com/web/updates/2015/08/using-requestidlecallback\n */\nwindow.requestIdleCallback = window.requestIdleCallback ||\n  function (cb) {\n    return setTimeout(function () {\n      var start = Date.now();\n      cb({ \n        didTimeout: false,\n        timeRemaining: function () {\n          return Math.max(0, 50 - (Date.now() - start));\n        }\n      });\n    }, 1);\n  }\n\nwindow.cancelIdleCallback = window.cancelIdleCallback ||\n  function (id) {\n    clearTimeout(id);\n  } "],"sourceRoot":""}