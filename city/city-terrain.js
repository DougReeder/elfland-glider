// city-terrain.js - the landscape geometry for an arctic city
// Data and code are in one file to avoid asynchronous loading.
// Copyright Â© 2023 Doug Reeder; Licensed under the GNU GPL-3.0

const X_POINTS = 29;
const Z_POINTS = 33;
const terrainHeights = `
0   0   0   0   0   0   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
0  40  40  40  40  34  30 23 25 28 30 24 18 13  7 11 14 18 15 11  8  4  8 10 14 15  8  0  0
0  40  80  80  80  69  60 46 50 55 60 49 37 26 13 22 27 37 30 22 16  8 16 20 27 30 16  6  0
0  40  80 120 120 103  91 70 76 83 90 73 55 38 20 32 43 55 44 34 23 12 22 32 41 45 19  4  0
0  40  80 120 160 132 100 73 54 57 64 55 42 25 14 22 30 37 28 18  4  4  4  2  4  4  2  2  0
0  51 103 127 134 108  95 75 55 36 39 38 28 13  8 11 13 19 14  2  2  2  2  0  2  2  0  0  0
0  25  64  96  90  84  81 71 50 37 19 20  1  1  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0
0  12  24  36  48  60  64 55 47 25 19  1  1  1  1  1  1  1  1  1  1  1  1  1  0  0  0  0  0
0  14  28  42  56  70  41 43 28 23  1  1  1  1  1  1  1  1  1  1  1  1  1  1 .6  0  0  0  0
0  12  24  36  48  60  47 21 22  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1 .6  0  0  0
0  18  36  53  70  55  39 24  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  0  0
0  20  40  60  81  54  28  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  0  0
0  28  57  85  85  57  29  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  0
0  14  43  72  54  37  19  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  0
0  20  40  59  45  30  15  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  0
0  15  30  44  33  22  12  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  0
0  19  38  56  42  29  15  1  1  1  1  1  1  1  1  1  1 -2  1  1  1  1  1  1  1  1  1  1  0
0  12  24   4   2   2   2  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  0
0   4   2   2   0   0   0  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  0
0   2   0   0   0   0   0  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  0
0   0   0   0   0   0   1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  0
0   0   0   0   2   2   4  4  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  0  0
0   0   2   2   4  24  16  8  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1 .6  0  0
0   2   4  33  45  37  28 19 10  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1 .6  0  0  0
0   8  17  25  33  33  27 20 14  7  1  1  1  1  1  1  1  1  1  1  1  1  1  1 .6  0  0  0  0
0   6  13  19  25  33  31 24 16  8 10  1  1  1  1  1  1  1  1  1  1  1  1 .6  0  0  2  2  0
0  11  22  34  39  42  33 24 15 20 16 17  1  1  1  1  1  1  1  1  1  1  0  0  0  2  4  4  0
0  17  33  50  53  43  33 23 30 33 34 24 18 15 19 14 10  5  3 .6  0  0  0  2  2  4 19  9  0
0  22  44  65  52  41  30 40 50 51 39 32 27 30 37 28 19  4 .6  0  0  2  2  4 26 41 28 14  0
0  32  65  48  39  30  21 30 38 38 31 25 35 45 55 41 28  2  0  0  2  4 40 35 39 55 37 18  0
0  32  42  32  26  20  15 20 25 25 20 17 23 30 37 27 18  2  0  0  2 16 27 23 26 37 23 12  0
0  16  21  16  13  10   7 10 12 12 10  8 11 15 18 14  9 .5  0  0  2  8 13 12 13 18 12  6  0
0   0   0   0   0   0   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
`;


AFRAME.registerGeometry('city-terrain', {
  schema: {
    spacing: {default: 100},
    sunPosition: {type: 'vec3', default: {x:-1.0, y:1.0, z:-1.0}}
  },

  init: function (data) {
    // Creates geometry.
    const geometry = new THREE.PlaneGeometry((X_POINTS - 1) * data.spacing, (Z_POINTS - 1) * data.spacing, X_POINTS - 1, Z_POINTS - 1);
    geometry.rotateX(-Math.PI / 2);
    const vertices = geometry.attributes.position.array;
    const floatPatt = /\s*\S+/y;
    let match, i = 0;
    while (match = floatPatt.exec(terrainHeights)) {
      const height = parseFloat(match[0]);
      vertices[i * 3 + 1] = height;
      ++i;
    }
    geometry.computeVertexNormals();
    this.geometry = geometry;
  }
});
